<?xml version="1.0"?>
<!--$Id$-->
<project name="s2container.php5" default="build" basedir=".">
	<taskdef name="phingMaven"
		classname="phing.tasks.ext.soya.maven.PhingMavenTask"/>
	<taskdef name="phingMavenClean"
		classname="phing.tasks.ext.soya.maven.PhingMavenCleanTask"/>
	<taskdef name="coverage-setup2"
		classname="phing.tasks.ext.soya.coverage.CoverageSetupTask2"/>
	<taskdef name="report.coverage2"
		classname="phing.tasks.ext.soya.coverage.CoverageReportTask2"/>
	<taskdef name="checkstyle"
		classname="phing.tasks.ext.soya.CheckStyleTask"/>

 	<target name="read-properties">
		<echo msg="Reading property files..." />
	    <!--read properties-->
    	<property file="./build.properties" override="true"/>

	    <!--read common properties-->
	    <property file="./common.properties"/>
	</target>

	<!--create directories-->
	<target name="prepare" depends="read-properties">
		<echo msg="Preparing build..." />
        <!--copy file-->
        <copy file="build-dist.properties" tofile="build.properties"/>

	    <!--add include_path -->
	    <includepath>
		    <classpath>
			    <pathelement dir="${php}"/>
			    <pathelement dir="${test}"/>
			    <pathelement dir="${test.s2container.php5}"/>
	    	</classpath>
    	</includepath>

		<mkdir dir="${build}" />
		<mkdir dir="${build.report}"/>
		<mkdir dir="${build.report.coverage}"/>
		<mkdir dir="${build.report.checkstyle}"/>
	</target>

	<target name="copy" depends="prepare">
		<echo>Building...</echo>
	</target>

	<target name="test" depends="prepare" description="all test mainframe">
		<echo msg="Test start..."/>
		<property name="package" value=""/>
		<property name="formatter" value=""/>
		<phpunit2>
			<formatter usefile="false"
				classname="phing.tasks.ext.soya.phpunit2.${formatter}SummaryPHPUnit2ResultFormatterWithClassName"/>
			<formatter type="xml" todir="${build.report}"/>
			<batchtest>
				<fileset dir="${test.s2container.php5}/${package}">
					<include name="**/*Test.php" />
					<include name="*Test.php" />
					<exclude name="**/db/**"/>
				</fileset>
			</batchtest>
		</phpunit2>
		<phpunit2report infile="${build.report}/testsuites.xml"
			todir="${build.report}" 
			format = "noframes" styledir="${etc.phing.style}"/>
		<echo msg="Tests done, please see build/report/php-noframes.html"/>
	</target>

	<!--unit test-->
	<target name="unit-test" depends="prepare" description="one unit test">
		<echo msg="Test one file"/>
		<property name="file" value=""/>
		<property name="formatter" value=""/>
		<echo msg="${src.tests}/${file}Test.php"/>
		<phpunit2>
			<formatter usefile="false"
				classname="phing.tasks.ext.soya.phpunit2.${formatter}SummaryPHPUnit2ResultFormatterWithClassName"/>
			<formatter type="xml" todir="${build.report}"/>
			<batchtest>
				<fileset dir="${test.s2container.php5}">
					<include name="${file}Test.php" />
				</fileset>
			</batchtest>
		</phpunit2>
		<phpunit2report infile="${build.report}/testsuites.xml"
			todir="${build.report}" 
			format = "noframes" styledir="${etc.phing.style}"/>
		<echo msg="Tests done, please see build/report/php-noframes.html"/>
	</target>                                                                

	<!--report.coverage-->
	<target name="coverage" depends="prepare">
		<echo msg="setup coverage"/>
		<property name="formatter" value=""/>
		<coverage-setup2 database="${build.report.coverage}/coverage.db">
			<fileset dir="${php}" >
				<include name="**/*.php"/>
			</fileset>
		</coverage-setup2>
		<echo msg="Coverage setup finished, continue..."/>
		<phpunit2 printsummary="true">
			<formatter usefile="false"
				classname="phing.tasks.ext.soya.phpunit2.${formatter}SummaryPHPUnit2ResultFormatterWithClassName"/>
			<formatter type="xml" todir="${build.report.coverage}"/>
			<formatter classname="phing.tasks.ext.coverage.CoverageFormatter" usefile="false"/>
			<batchtest>
				<fileset dir="${test.s2container.php5}">
					<include name="*Test.php" />
					<include name="**/*Test.php" />
				</fileset>
			</batchtest>
		</phpunit2>
		<echo msg="test finished."/>
		<phpunit2report infile="${build.report.coverage}/testsuites.xml" format="frames" todir="${build.coverage.report}" styledir="${etc.phing.style}"/>
		<report.coverage2 outfile="${build.coverage.report}/coverage.xml">
			<classpath refid="project.class.path"/>
			<report styledir="${etc.phing.style}" todir="${build.report.coverage}"/>
		</report.coverage2>
	</target>

	<!--execute all tests and all copy-->
	<target name="build" depends="prepare">
		<phingcall target="copy"/>
	</target>
	
    <!--clean up working copy-->
	<target name="clean" depends="read-properties">
		<echo msg="Cleaning up..."/>
		<echo msg="Going to delete libraries installed in lib and src"/>
		<phingMavenClean projectFile="./project.xml">
			<path>
				<pathelement dir="lib"/>
				<pathelement dir="src"/>
			</path>
		</phingMavenClean>
		<delete dir="${build}"/>
		<delete dir="${lib}"/>
		<echo msg="We will not delete libraries installed in etc."/>
		<echo msg="If you want to clean up all, please use clean-all."/>
	</target>

	<!--clean up dist-->
	<target name="clean-all" depends="read-properties">
		<echo msg="Cleaning up libraries, build, phing, all."/>
		<input propertyName="confirm" defaultValue="n" 
			   message="Are you sure to continue? type y/n[n]"
			   promptChar="&gt;"/>
		<if>
			<equals arg1="${confirm}" arg2="y" />
			<then>
				<phingMavenClean projectFile="./project.xml">
					<path>
						<pathelement path="lib"/>
						<pathelement path="src"/>
						<pathelement path="etc"/>
					</path>
				</phingMavenClean>
				<delete dir="${build}"/>
				<delete dir="${lib}"/>
				<delete file="build.properties"/>
			</then>
			<else>
				<echo msg="Request canceled."/>
			</else>
		</if>
	</target>

	<!--phing maven-->
	<target name="maven" depends="prepare">
		<echo msg="Starting resolve dependencies..."/>
		<phingMaven projectFile="./project.xml" type="all"
			        localRepository="${phingMaven.local.repository}"/>
		<echo msg="Done"/>
	</target>

	<!-- Spike checkstyle -->
	<target name="checkstyle" depends="build">
		<echo msg="Starting check style ..."/>
		 <checkstyle src="${php}"
			outdir="${build.report.checkstyle}" />
	</target>

</project>
