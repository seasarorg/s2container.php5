
  <!-- ##################################################################### -->
  <sect1 id="misc.pdointerceptor"><title>Database access using PdoInterceptor</title>
    <sect2><title>About Example</title>
      <para>
        Example of database access using eptor is in example/misc/pdo.
        Each class file, a configuration file, and directory composition become the next.
                
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
example/misc/pdo/
 +-- classes/
 |    +-- Paginate.php
 |    +-- PdoInterceptor.php
 |    +-- SqlFileReader.php
 |    +-- StandardDto.php
 |    +-- StandardPdo.php
 +-- example/
 |    +-- config/
 |    |    +-- pdo.dicon
 |    |    +-- SqliteAPdo.php
 |    |    +-- SqliteBPdo.php
 |    +-- db/
 |         +-- example.sql
 |         +-- sqlite_a.db
 |         +-- sqlite_b.db
 |         +-- sqlite_c.db
 +-- tests/
      
]]></programlisting>

        The classes in a clases directory are required in order to use PdoInterceptor.
      </para>
      
      <para>
        A data source setup of PDO is set up by the following three files in a config directory.
        Respectively, the Sqlite database file of db directory is used as the data source.
        <itemizedlist>
          <listitem>SqliteAPdo.php : using db/sqlite_a.db as DSN</listitem>
          <listitem>SqliteBPdo.php : using db/sqlite_b.db as DSN</listitem>
          <listitem>pdo.dicon : using db/sqlite_c.db as DSN</listitem>
        </itemizedlist>
          Each database is built by db/example.sql.
          Moreover, please refer to <link linkend="misc.pdo">Database access using PDO</link> for a setup of PDO.
      </para>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>Summary of PdoInterceptor</title>
      <para>
        The aspect target of PdoInterceptor is a class and an interface.
        If an aspect is carried out to a class, the method which suited Pointcut is performed.
        PdoInterceptor will treat the return value of a method as an SQL query, 
        if the return value of a method is string.
        If the return value of a method is Hash Array, the value is treated as a context at the time of SQL execution.
        If the return value of a method is Array, the 1st value is treated as an SQL query,
        the 2nd value is treated as a context at the time of SQL execution.
        If the return value of a method is null, an SQL file is searched, and an SQL query is acquired when found.
        A method is not called when the aspect of PdoIterceptor is carried out to the interface.
        Like the case where the return value of a method is null, 
        an SQL file is searched, and an SQL query is acquired when found.
      </para>
      
      <para>
        When an SQL query is acquirable, sql is executed in a database and a result is acquired,
        and the result is returned as a return value of a method.
        Prepared Statement of PDO is used for execution of the SQL query to a data base.
        As for value bound to Prepared Statement, a method argument is used.
        If the return value of a method is Array, the 2nd value is treated as bind value.
      </para>

      <para>
      PdoInterceptor is connected to a database using the PDO component which exists in S2Container into which self is registered.
      PdoInterceptor class and StandardPdo class are registered into the namespace "pdo" by the default.
      </para>
      
      <para>
        PdoInterceptor does not have OR map function and automatic SQL construction function.
      </para>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>Aspect to Class</title>
      <para>
        Let's craete Dao class which accesses EMP table.
        The findAll method which gets all the data from EMP table is implemented in Dao class.
        As a return value of the method, the SQL query executed to a database is returned.<sbr/>
        With the s2component function, Dao class is registered as a component.
        And pdo.interceptor is aspected to Dao class with the s2aspect function.
        
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example010.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';

class Dao {
    public function findAll() {
        return 'select * from emp';
    }
}

s2component('Dao');
s2aspect('pdo.interceptor', '/Dao$/');

$dao = s2app::get('Dao');
$rows = $dao->findAll();
]]></programlisting>
      </blockquote>

    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>Setup Bind value By Method result</title>
      <para>
        Let's create Dao class which accesses EMP table.
        The findById method which searches data with ID from EMP table is implemented in Dao class.
        An array is returned as a return value of a method, the 1st value is treated as SQL query,
        the 2nd value is treated as a context at the time of SQL execution.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example010.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';

class Dao {
    public function findById() {
        $sql = 'select * from emp where EMPNO = :id';
        $context = array('id' => 7369);
        return array($sql, $context);
    }
}

s2component('Dao');
s2aspect('pdo.interceptor', '/Dao$/');

$dao = s2app::get('Dao');
$rows = $dao->findById();
]]></programlisting>      
      </blockquote>

    </sect2>


    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>Aspect to Interface</title>
      <para>
        Let's create IDao interface which accesses EMP table.
        The findAll method which gets all the data from EMP table is defined in IDao interface.<sbr/>
        With the s2component function, Dao class is registered as a component.
        And pdo.interceptor is aspected to Dao class with the s2aspect function.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example020.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';

interface IDao {
    public function findAll();
}

s2component('IDao');
s2aspect('pdo.interceptor', '/Dao$/');

$dao = s2app::get('IDao');
$rows = $dao->findAll();
]]></programlisting>      
      </blockquote>

      <para>
        The SQL query executed when findAll method is called is described to SQL file.
        SQL file is located to the same directory as Interface file.
        SQL file name is "Interaface name"_"method name".sql.
        In the case of the findAll method of IDao interface, it is set to "IDao_findAll.sql".
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/IDao_findAll.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from emp

]]></programlisting>      
      </blockquote>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>Setup Bind value by Method argument</title>
      <para>
        Let's create IDao interface which accesses EMP table.
        The findById method which searches data with ID from EMP table is defined in IDao class.
        ID which searches data is specified by the argument of findById method.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example020.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';

interface IDao {
    public function findById($id);
}

s2component('IDao');
s2aspect('pdo.interceptor', '/Dao$/');

$dao = s2app::get('IDao');
$rows = $dao->findAll();
]]></programlisting>      
      </blockquote>

      <para>
        The SQL query executed when findAll method is called is described to SQL file.
        SQL file is located to the same directory as Interface file.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/IDao_findById.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from emp where EMPNO = :id

]]></programlisting>      
      </blockquote>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>Using @DTO Annotation</title>
      <para>
      PdoInterceptor specifies StandardDto class as PDO::FETCH_CLASS as a default value.
      The StandardDto class implemets the __call method and supports the accessor method to a column.
      When a column name is "ABC_XYZ", a column value can be accessed by the setAbcXyz method and the getAbcXyz method.     
      </para>
      <para>
        When specifying PDO::FETCH_CLASS, you can specify it by @DTO annotation.
        A form is as follows.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @DTO(DTO class name)
 */
]]></programlisting>

      <para>
        Let's create IDao interface which accesses EMP table.
        The findById method which searches data with ID from EMP table is defined in IDao class.
        The BarDto class is specified as PDO::FETCH_CLASS class.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example030.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';

class BarDto extends StandardDto{}
interface IDao {
    /**
     * @DTO('BarDto')
     */
    public function findById($id);
}

s2component('IDao');
s2aspect('pdo.interceptor', '/Dao$/');

$dao = s2app::get('IDao');

$rows = $dao->findById(7369);
]]></programlisting>      
      </blockquote>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>Using PDO in Dao</title>
      <para>
        If using PDO directly in Dao, injection of PDO component is carried out to Dao component.
        In the following example, in order to carry out injection of the SqliteBPdo component to CdDao class, "sqliteBPdo" public property is prepared.
        Thereby, injection of PDO component is carried out to CdDao component by the automatic injection function of S2Container.
        In the sampleTransaction method, the transaction is started using injected PDO component.
      </para>

      <blockquote>
        <itemizedlist>
          <listitem>example/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class CdDao {
    private $pdo = null;
    public function setPdo(Pdo $pdo) {
        $this->pdo = $pdo;
    }
    public function sampleTransaction() {
        try {
            \seasar\log\S2Logger::getInstance(__NAMESPACE__)->info('start transaction.', __METHOD__);
            $this->pdo->beginTransaction();
            $this->insert(10, 'aaa', 'bbb');
            $this->updateTitle(10, 'AAA');
            $this->delete(10);
            \seasar\log\S2Logger::getInstance(__NAMESPACE__)->info('commit transaction.', __METHOD__);
            $this->pdo->commit();
        } catch (Exception $e) {
            \seasar\log\S2Logger::getInstance(__NAMESPACE__)->info($e->getMessage(), __METHOD__);
            \seasar\log\S2Logger::getInstance(__NAMESPACE__)->info('rollback transaction.', __METHOD__);
            $this->pdo->rollBack();
        }
    }
    public function insert($id, $title, $content) {
        return "insert into CD values(:id, :title, :content)";
    }
    public function updateTitle($id, $title) {
        return "update CD set title = :title where id = :id";
    }
    public function delete($id) {
        return "delete from CD where id = :id";
    }
}
]]></programlisting>      
      </blockquote>

      <para>
      An executable file becomes the next.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example040.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/example/CdDao.php');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_b.db';
s2aspect('pdo.interceptor', '/Dao$/', '/^(insert|update|delete)/');

$dao = s2app::get('CdDao');
$rows = $dao->sampleTransaction();
]]></programlisting>      
      </blockquote>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>Paging by Paginate class</title>
      <para>
        Paginate class is a utility class which performs paging when acquiring data from Database.
        The EmpDao class which accesses EMP table is created as an example.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/EmpDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class EmpDao {
    public function byPaginate(\Paginate $paginate) {
        if (!$paginate->hasTotal()) {
            list($row) = $this->findAllTotal($paginate);
            $paginate->setTotal($row->total);
        }
        return $this->findAll($paginate);
    }
    public function findAllTotal(\Paginate $paginate) {
        return 'select count(*) as total from EMP order by EMPNO';
    }

    public function findAll(\Paginate $paginate) {
        $sql = 'select * from EMP order by EMPNO limit :limit offset :offset';
        $context = array('limit' => $paginate->getLimit(), 'offset' => $paginate->getOffset());
        return array($sql, $context);
    }
}
]]></programlisting>      
      </blockquote>
      <para>
        In the byPaginate method, fistly the total number of data is acquired by the findAllTotal method, and it is set to paginate instance.
        (In order to carry out paging processing with Paginate class, the total number of data is required.)
        Then, findAll was performed and data is acquired. 
        By the findAll method, the limit/offset information which the paginate instance has is set up, and paging is carried out.
      </para>

      <para>
         Let's create example050.php which performs the next processing.
      </para>
      <orderedlist>
        <listitem>Reading of a common setting file</listitem>
        <listitem>PdoInterceptor is applied to Dao class by automatic aspect function</listitem>
        <listitem>The classes directory is imported by the import method of S2ApplicationContext</listitem>
        <listitem>SqlitePdoA.php which sets sqlite_a.db as DSN is imported by the import method of S2ApplicationContext</listitem>
        <listitem>Acquisition of EmpDao component</listitem>
        <listitem>Paginate instance is generated and 1 Paige's number of items is set up.</listitem>
        <listitem>Execution of the ByPaginate method</listitem>
        <listitem>Changes to next Paige</listitem>
        <listitem>Execution of the ByPaginate method</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>example/example050.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/example/EmpDao.php');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';
s2aspect('pdo.interceptor', '/Dao$/', '/^find/');

$dao = s2app::get('EmpDao');
$paginate = new Paginate;
$paginate->setLimit(2);
$rows = $dao->byPaginate($paginate);
var_dump($rows);

$paginate->next();
$rows = $dao->byPaginate($paginate);
var_dump($rows);
]]></programlisting>
      </blockquote>
      
    <!-- ##################################################################### -->
    <sbr/>
      <sect3><title>Paginate API Reference</title>
        <blockquote>

        <formalpara><title>Paginate::getTotalPage method</title></formalpara>
        <para>
          All the number of pages is returned. (total records / page limit)
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getTotalPage();
]]></programlisting>

        <formalpara><title>Paginate::getPage method</title></formalpara>
        <para>
          Current page number is returned.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getPage();
]]></programlisting>

        <formalpara><title>Paginate::setPage method</title></formalpara>
        <para>
          Page number is set up.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $page
     * @throw Exception
     */
    final public function setPage($page);
]]></programlisting>

        <formalpara><title>Paginate::getOffset method</title></formalpara>
        <para>
          Current offset position is returned.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getOffset();
]]></programlisting>

        <formalpara><title>Paginate::setLimit method</title></formalpara>
        <para>
          The number of cases per 1 Paige is set up.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @prama integer $limit
     */
    final public function setLimit($limit);
]]></programlisting>

        <formalpara><title>Paginate::getTotal method</title></formalpara>
        <para>
          The total number is returned.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     * @throw Exception 全件数が未設定の場合にスローされます。
     */
    final public function getTotal();
]]></programlisting>

        <formalpara><title>Paginate::setTotal method</title></formalpara>
        <para>
          The total number is set up.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $total
     */
    final public function setTotal($total);
]]></programlisting>

        <formalpara><title>Paginate::setWindow method</title></formalpara>
        <para>
          The number of Paige displayed on a window is set up.。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $window
     */
    final public function setWindow($window);
]]></programlisting>

        <formalpara><title>Paginate::next method</title></formalpara>
        <para>
          1 page is advanced.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    final public function next();
]]></programlisting>

        <formalpara><title>Paginate::isNext method</title></formalpara>
        <para>
          It is returned whether there is any next page.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return boolean
     */
    final public function isNext();
]]></programlisting>

        <formalpara><title>Paginate::prev method</title></formalpara>
        <para>
          1 page returns.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    final public function prev();
]]></programlisting>

        <formalpara><title>Paginate::isPrev method</title></formalpara>
        <para>
          It is returned whether there is any previous page.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return boolean
     */
    final public function isPrev();
]]></programlisting>

        <formalpara><title>Paginate::pages method</title></formalpara>
        <para>
         The page number settled in window is enumerated.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return array
     */
    final public function pages() {
]]></programlisting>

        </blockquote>
      </sect3>
    </sect2>
  </sect1>
