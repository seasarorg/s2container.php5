
  <!-- ##################################################################### -->
  <sect1 id="misc.pdointerceptor"><title>Database access using PdoInterceptor</title>
    <sect2><title>About Example</title>
      <para>
        Example of database access using eptor is in example/misc/pdo.
        Each class file, a configuration file, and directory composition become the next.
                
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
example/misc/pdo/
 +-- classes/
 |    +-- sample/
 |    +-- Paginate.php
 |    +-- PdoInterceptor.php
 |    +-- SqlFileReader.php
 +-- config/
 |    +-- pdo.dicon
 |    +-- SqliteAPdo.php
 |    +-- SqliteBPdo.php
 +-- db/
 |    +-- sqlite_a.db
 |    +-- sqlite_b.db
 |    +-- sqlite_c.db
 +-- tests/
 +-- main.php
      
]]></programlisting>

        The following three classes in a clases directory are required in order to use PdoInterceptor.
        <itemizedlist>
          <listitem>PdoInterceptor.php</listitem>
          <listitem>SqlFileReader.php</listitem>
          <listitem>Paginate.php</listitem>
        </itemizedlist>
      </para>
      
      <para>
        A data source setup of PDO is set up by the following three files in a config directory.
        Respectively, the Sqlite database file of db directory is used as the data source.
        <itemizedlist>
          <listitem>SqliteAPdo.php : using db/sqlite_a.db as DSN</listitem>
          <listitem>SqliteBPdo.php : using db/sqlite_b.db as DSN</listitem>
          <listitem>pdo.dicon : using db/sqlite_c.db as DSN</listitem>
        </itemizedlist>
          Each database is built by db/example.sql.
          Moreover, please refer to <link linkend="misc.pdo">Database access using PDO</link> for a setup of PDO.
      </para>
    </sect2>

    <sbr/>
    <sect2><title>The outline of PdoInterceptor</title>
      <para>
        The aspect target of PdoInterceptor is a class and an interface.
        If an aspect is carried out to a class, the method which suited Pointcut is performed.
        PdoInterceptor will treat the return value of a method as an SQL query, 
        if the return value of a method is string.
        If the return value of a method is Array, the 1st value is treated as an SQL query,
        the 2nd value is treated as a context at the time of SQL execution.
        If the return value of a method is null, an SQL file is searched, and an SQL query is acquired when found.
        A method is not called when the aspect of PdoIterceptor is carried out to the interface.
        Like the case where the return value of a method is null, 
        an SQL file is searched, and an SQL query is acquired when found.
      </para>
      
      <para>
        When an SQL query is acquirable, sql is executed in a database and a result is acquired,
        and the result is returned as a return value of a method.
        When there is two or more PDO setup which can be used, it specifies by "@S2Pdo" annotation which DSN is used.
        Prepared Statement of PDO is used for execution of the SQL query to a data base.
        As for value bound to Prepared Statement, a method argument is used.
        If the return value of a method is Array, the 2nd value is treated as bind value.
      </para>

      <para>
        PdoInterceptor does not have OR map function and automatic SQL construction function.
      </para>
    </sect2>

    <sbr/>
    <sect2><title>Aspect to Class</title>
      <para>
        CdDao class which accesses a CD table is created.
        The findAll method which acquires all the data from a CD table is implemented in a CdDao class.
        As a return value of a method, the SQL query executed to a database is returned.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findAll() {
        return 'select * from CD';
    }
}

]]></programlisting>
      </blockquote>

      <para>
        sample1.php which performs the next processing is created.
        sqlite_a.db is used for Sqlite Database file.
      </para>
      <orderedlist>
        <listitem>Reading of a common setting file</listitem>
        <listitem>PdoInterceptor is applied to Dao class by automatic aspect function</listitem>
        <listitem>The classes directory is imported by the import method of S2ApplicationContext</listitem>
        <listitem>SqlitePdoA.php which sets sqlite_a.db as DSN is imported by the import method of S2ApplicationContext</listitem>
        <listitem>Acquisition of CdDao component</listitem>
        <listitem>Execution of findAll method</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample1.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::CdDao');
$rows = $dao->findAll();
var_dump($rows);

]]></programlisting>
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>Aspect to Interface</title>
      <para>
        ICdDao interface which accesses CD table is created.
        The findAll method which acquires all the data from CD table is defined in ICdDao interface.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/ICdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class ICdDao {
    public function findAll();
}

]]></programlisting>      
      </blockquote>

      <para>
        The SQL query executed when findAll method is called is described to an SQL file.
        An SQL file is located to the same directory as Interface file.
        An SQL file name is "Interaface name"_"method name".sql.
        In the case of the findAll method of ICdDao interface, it is set to "ICdDao_findAll.sql".
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/ICdDao_findAll.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from CD

]]></programlisting>      
      </blockquote>

      <para>
        sample2.php which performs the next processing is created.
        sqlite_a.db is used for Sqlite Database file.
      </para>
      <orderedlist>
        <listitem>Reading of a common setting file</listitem>
        <listitem>PdoInterceptor is applied to Dao class by automatic aspect function</listitem>
        <listitem>The classes directory is imported by the import method of S2ApplicationContext</listitem>
        <listitem>SqlitePdoA.php which sets sqlite_a.db as DSN is imported by the import method of S2ApplicationContext</listitem>
        <listitem>Acquisition of ICdDao component</listitem>
        <listitem>Execution of findAll method</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample2.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$rows = $dao->findAll();
var_dump($rows);

]]></programlisting>      
      </blockquote>

    </sect2>

    <sbr/>
    <sect2><title>Setup Bind value by Method argument</title>
      <para>
        CdDao class which accesses a CD table is created.
        The findById method which searches data with ID from CD table is implemented in CdDao class.
        ID which searches data is specified by the argument of findById method.
        The embedding of ID to an SQL query is described like "/*:Variable name*/sample data".
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findById($id) {
        return "select * from CD where id = /*:id*/5";    
    }
}

]]></programlisting>      
      </blockquote>

      <para>
        sample3.php which performs the next processing is created.
        sqlite_a.db is used for Sqlite Database file.
      </para>
      <orderedlist>
        <listitem>Reading of a common setting file</listitem>
        <listitem>PdoInterceptor is applied to Dao class by automatic aspect function</listitem>
        <listitem>The classes directory is imported by the import method of S2ApplicationContext</listitem>
        <listitem>SqlitePdoA.php which sets sqlite_a.db as DSN is imported by the import method of S2ApplicationContext</listitem>
        <listitem>Acquisition of CdDao component</listitem>
        <listitem>Execution of findById method</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample3.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$rows = $dao->findById(1);
var_dump($rows);

]]></programlisting>      
      </blockquote>

    </sect2>

    <sbr/>
    <sect2><title>Using Object for Bind value</title>
      <para>
        CdDao class which accesses a CD table is created.
        The findBySqlFile1 method which searches data with ID from CD table is implemented in CdDao class.
        ID which searches data is specified by the argument of findById method.
        The embedding of ID to an SQL query is described like "/*:Variable name*/sample data".
        The null is returned as a return value of a method.
        PdoInterceptor acquires an SQL query from an SQL file, when the return value of a method is null.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findBySqlFile1($condition){}
}

]]></programlisting>      
      </blockquote>

      <para>
        The SQL query executed when findBySqlFile1 method is called is described to an SQL file.
        An SQL file is located to the same directory as Interface file.
        An SQL file name is "Interaface name"_"method name".sql.
        In the case of the findBySqlFile1 method of CdDao class, it is set to "CdDao_findBySqlFile1.sql".
        Since SQL file is required as a PHP file, you can write SQL file as PHP script.
        If a bind value is embedded at SQL query using Object,
        the property and method of an object are accessed by describing "_" (underbar).
        It is set to ":condition_id" when accessing id property of $condition object.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao_findBySqlFile1.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from CD
/* <?php if (is_integer($condition->id)):?> */
    where id = /*:condition_id*/5
/* <?php endif?> */

]]></programlisting>      
      </blockquote>
      <para>
        sample4.php which performs the next processing is created.
        sqlite_a.db is used for Sqlite Database file.
      </para>
      <orderedlist>
        <listitem>Reading of a common setting file</listitem>
        <listitem>PdoInterceptor is applied to Dao class by automatic aspect function</listitem>
        <listitem>The classes directory is imported by the import method of S2ApplicationContext</listitem>
        <listitem>SqlitePdoA.php which sets sqlite_a.db as DSN is imported by the import method of S2ApplicationContext</listitem>
        <listitem>Acquisition of CdDao component</listitem>
        <listitem>Creating Condition object</listitem>
        <listitem>Execution of findBySqlFile1 method</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample4.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$condition = new StdClass;
$condition->id = 1;
$rows = $dao->findBySqlFile1($condition);
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>Using Array for Bind value</title>
      <para>
        CdDao class which accesses a CD table is created.
        The findBySqlFile3 method which searches data with ID from CD table is implemented in CdDao class.
        The null is returned as a return value of a method.
        PdoInterceptor acquires an SQL query from an SQL file, when the return value of a method is null.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findBySqlFile3($condition){}
}

]]></programlisting>      
      </blockquote>

      <para>
        The SQL query executed when findBySqlFile3 method is called is described to an SQL file.
        An SQL file is located to the same directory as Interface file.
        An SQL file name is "Interaface name"_"method name".sql.
        In the case of the findBySqlFile3 method of CdDao class, it is set to "CdDao_findBySqlFile3.sql".
        Since SQL file is required as a PHP file, you can write SQL file as PHP script.
        If a bind value is embedded at SQL query using Object,
        the property and method of an object are accessed by describing "_" (underbar).
        It is set to ":condition_id" when accessing id property of $condition object.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao_findBySqlFile3.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from CD
/* <?php if (is_integer($condition['id']):?> */
    where id = /*:condition_id*/5
/* <?php endif?> */

]]></programlisting>      
      </blockquote>
      <para>
        sample5.php which performs the next processing is created.
        sqlite_a.db is used for Sqlite Database file.
      </para>
      <orderedlist>
        <listitem>Reading of a common setting file</listitem>
        <listitem>PdoInterceptor is applied to Dao class by automatic aspect function</listitem>
        <listitem>The classes directory is imported by the import method of S2ApplicationContext</listitem>
        <listitem>SqlitePdoA.php which sets sqlite_a.db as DSN is imported by the import method of S2ApplicationContext</listitem>
        <listitem>Acquisition of CdDao component</listitem>
        <listitem>Creating Condition object</listitem>
        <listitem>Execution of findBySqlFile3 method</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample5.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$condition = array('id' => 1);
$rows = $dao->findBySqlFile3($condition);
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>Setup Bind value By Method result</title>
      <para>
        CdDao class which accesses a CD table is created.
        The findByTitle method which searches data with TITLE from CD table is implemented in CdDao class.
        Array is returned as a return value of a method, the 1st value is treated as an SQL query,
        the 2nd value is treated as a context at the time of SQL execution.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findByTitle() {
        return array("select * from CD where title = /*:title*/'AAA'", array('title' => 'S2Pdo!!!'));
    }
}

]]></programlisting>      
      </blockquote>
      <para>
        sample6.php which performs the next processing is created.
        sqlite_a.db is used for Sqlite Database file.
      </para>
      <orderedlist>
        <listitem>Reading of a common setting file</listitem>
        <listitem>PdoInterceptor is applied to Dao class by automatic aspect function</listitem>
        <listitem>The classes directory is imported by the import method of S2ApplicationContext</listitem>
        <listitem>SqlitePdoA.php which sets sqlite_a.db as DSN is imported by the import method of S2ApplicationContext</listitem>
        <listitem>Acquisition of CdDao component</listitem>
        <listitem>Execution of findByTitle method</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample6.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$rows = $dao->findByTitle();
var_dump($rows);

]]></programlisting>      
      </blockquote>

    </sect2>

    <sbr/>
    <sect2><title>Using @S2Pdo Annotation</title>
      <para>
        @S2Pdo annotation annotateds on a class or a method.
        The following two can be set up.
        <itemizedlist>
          <listitem>When using two or more data sources, it specifies which PDO component is used.</listitem>
        </itemizedlist>
      </para>
      <para>
        A form is as follows.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @S2Pdo('pdo' => PDO component name)
 */
]]></programlisting>

      <para>
        CdDao class which accesses a CD table is created.
        The findAllFromB method which acquires all the data from a CD table of sqlite_a.db Database is implemented in a CdDao class.
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    /**
     * @S2Pdo('pdo' => 'sqliteBPdo')
     */
    public function findAllFromB() {
        return "select * from CD";
    }
}

]]></programlisting>      
      </blockquote>
      <para>
        sample7.php which performs the next processing is created.
      </para>
      <orderedlist>
        <listitem>Reading of a common setting file</listitem>
        <listitem>PdoInterceptor is applied to Dao class by automatic aspect function</listitem>
        <listitem>The classes directory is imported by the import method of S2ApplicationContext</listitem>
        <listitem>The conf directory is imported by the import method of S2ApplicationContext (Three PDO components are imported)</listitem>
        <listitem>Acquisition of CdDao component</listitem>
        <listitem>Execution of findAllFromB method</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample7.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config');

$dao = s2app::get('sample::pdo::CdDao');
$rows = $dao->findAllFromB();
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>Using PDO in Dao</title>
      <para>
        If using PDO directly in Dao, injection of PDO component is carried out to Dao component.
        In the following example, in order to carry out injection of the SqliteBPdo component to CdDao class, "sqliteBPdo" public property is prepared.
        Thereby, injection of PDO component is carried out to CdDao component by the automatic injection function of S2Container.
        In the transactionalInsert method, the transaction is started using injected PDO component.
      </para>

      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public $sqliteBPdo = 's2binding';

    public function transactionalInsert() {
        try {
            $this->sqliteBPdo->beginTransaction();
            $this->insert(10, 'S2Pdo transaction', 'sample');
            $this->sqliteBPdo->commit();
        } catch (Exception $e) {
            seasar::log::S2Logger::getInstance(__NAMESPACE__)->warn($e->getMessage(), __METHOD__);
            $this->sqliteBPdo->rollBack();
        }
    }

    /**
     * @S2Pdo('pdo' => 'SqliteBPdo')
     */
    public function insert($id, $title, $content) {
        return "insert into CD values(/*:id*/5, /*:title*/'aaa', /*:content*/'bbb' )";
    }
}

]]></programlisting>      
      </blockquote>

      <para>
        sample8.php which performs the next processing is created.
      </para>
      <orderedlist>
        <listitem>Reading of a common setting file</listitem>
        <listitem>PdoInterceptor is applied to Dao class by automatic aspect function</listitem>
        <listitem>The classes directory is imported by the import method of S2ApplicationContext</listitem>
        <listitem>The conf directory is imported by the import method of S2ApplicationContext (Three PDO components are imported)</listitem>
        <listitem>Acquisition of CdDao component</listitem>
        <listitem>Execution of transactionalInsert method</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample8.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor', '/^(find|insert|update|delete)/');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config');

$dao = s2app::get('sample::pdo::CdDao');
$dao->transactionalInsert();

]]></programlisting>
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>Paging by Paginate class</title>
      <para>
        Paginate class is a utility class which performs paging when acquiring data from Database.
        The EmpDao class which accesses EMP table is created as an example.
        The sqliteC component which uses "db/sqlite_c.db" as a data source is used for PDO component.
        The sqliteC component is defined in "config/pdo.dicon".
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/EmpDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
/**
 * @S2Pdo('pdo' => 'sqliteC')
 */
class EmpDao {

    public function findByPaginate(::Paginate $paginate) {
        list($row) = $this->findAllTotal($paginate);
        $paginate->setTotal($row->total);
        return $this->findAll($paginate);
    }

    public function findAllTotal(::Paginate $paginate) {
        return "select count(*) as total from EMP";
    }

    public function findAll(::Paginate $paginate) {
        return "select * from EMP
                limit /*:paginate_getLimit*/3 offset /*:paginate_getOffset*/5";
    }
}

]]></programlisting>      
      </blockquote>
      <para>
        In the findByPaginate method, fistly the total number of data is acquired by the findAllTotal method, and it is set to paginate instance.
        (In order to carry out paging processing with Paginate class, the total number of data is required.)
        Then, findAll was performed and data is acquired. 
        By the findAll method, the limit/offset information which the paginate instance has is set up, and paging is carried out.
      </para>

      <para>
        sample9.php which performs the next processing is created.
      </para>
      <orderedlist>
        <listitem>Reading of a common setting file</listitem>
        <listitem>PdoInterceptor is applied to Dao class by automatic aspect function</listitem>
        <listitem>The classes directory is imported by the import method of S2ApplicationContext</listitem>
        <listitem>SqlitePdoA.php which sets sqlite_a.db as DSN is imported by the import method of S2ApplicationContext</listitem>
        <listitem>Acquisition of EmpDao component</listitem>
        <listitem>Paginate instance is generated and 1 Paige's number of items is set up.</listitem>
        <listitem>Execution of the findByPaginate method</listitem>
        <listitem>Changes to next Paige</listitem>
        <listitem>Execution of the findByPaginate method</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample9.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor', '/^find/');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config');

$dao = s2app::get('sample::pdo::EmpDao');
$paginate = new Paginate;
$paginate->setLimit(5);
$rows = $dao->findByPaginate($paginate);
var_dump($rows);

$paginate->next();
$rows = $dao->findByPaginate($paginate);
var_dump($rows);

]]></programlisting>
      </blockquote>
      
    <sbr/>
      <sect3><title>Paginate API Reference</title>
        <blockquote>

        <formalpara><title>Paginate::getTotalPage method</title></formalpara>
        <para>
          All the number of pages is returned. (total records / page limit)
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getTotalPage();
]]></programlisting>

        <formalpara><title>Paginate::getPage method</title></formalpara>
        <para>
          Current page number is returned.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getPage();
]]></programlisting>

        <formalpara><title>Paginate::setPage method</title></formalpara>
        <para>
          Page number is set up.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $page
     * @throw Exception
     */
    final public function setPage($page);
]]></programlisting>

        <formalpara><title>Paginate::getOffset method</title></formalpara>
        <para>
          Current offset position is returned.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getOffset();
]]></programlisting>

        <formalpara><title>Paginate::setLimit method</title></formalpara>
        <para>
          The number of cases per 1 Paige is set up.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @prama integer $limit
     */
    final public function setLimit($limit);
]]></programlisting>

        <formalpara><title>Paginate::getTotal method</title></formalpara>
        <para>
          The total number is returned.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     * @throw Exception 全件数が未設定の場合にスローされます。
     */
    final public function getTotal();
]]></programlisting>

        <formalpara><title>Paginate::setTotal method</title></formalpara>
        <para>
          The total number is set up.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $total
     */
    final public function setTotal($total);
]]></programlisting>

        <formalpara><title>Paginate::setWindow method</title></formalpara>
        <para>
          The number of Paige displayed on a window is set up.。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $window
     */
    final public function setWindow($window);
]]></programlisting>

        <formalpara><title>Paginate::next method</title></formalpara>
        <para>
          1 page is advanced.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    final public function next();
]]></programlisting>

        <formalpara><title>Paginate::isNext method</title></formalpara>
        <para>
          It is returned whether there is any next page.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return boolean
     */
    final public function isNext();
]]></programlisting>

        <formalpara><title>Paginate::prev method</title></formalpara>
        <para>
          1 page returns.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    final public function prev();
]]></programlisting>

        <formalpara><title>Paginate::isPrev method</title></formalpara>
        <para>
          It is returned whether there is any previous page.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return boolean
     */
    final public function isPrev();
]]></programlisting>

        <formalpara><title>Paginate::pages method</title></formalpara>
        <para>
         The page number settled in window is enumerated.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return array
     */
    final public function pages() {
]]></programlisting>

        </blockquote>
      </sect3>
    </sect2>
  </sect1>
