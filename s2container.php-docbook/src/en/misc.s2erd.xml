<sect1 id="misc.s2erd"><title>Using S2Erd with ERD design tools</title>
    <para>
        S2Erd generates the PHP source of the Zend_Db_Table class from the data of the ERD design tool. 
    </para>

    <sect2><title>Environment</title>
        <itemizedlist>
            <listitem>PHP-5.3.2</listitem>
            <listitem>Zend Framework v1.10.2</listitem>
            <listitem>s2container.php-2.0.3</listitem>
            <listitem>s2erd-0.3.0</listitem>
        </itemizedlist>
        <para>ERD design tools</para>
        <itemizedlist>
            <listitem><ulink url="http://wb.mysql.com/">MySQL Workbech version 5.1.18</ulink></listitem>
            <listitem><ulink url="http://ermaster.sourceforge.net/index.html">ER Master version 1.0.0-20091210-0025</ulink></listitem>
        </itemizedlist>
    </sect2>

    <sbr/>
    <sect2><title>Creation of a sample project</title>
        <para>
            Create a Zend Framework project according to <link linkend="misc.zend">Using S2Container with Zend_Controller</link>.
        </para>
    </sect2>

    <sbr/>
    <sect2><title>Installation of S2Erd</title>

        <blockquote><formalpara><title>Download</title><sbr/></formalpara>
            <itemizedlist>
                <listitem><ulink url="http://s2container.php5.seasar.org/download/S2Erd-0.3.0.tgz">S2Erd-0.3.0.tgz</ulink></listitem>
            </itemizedlist>
        </blockquote>

        <sbr/>
        <blockquote><formalpara><title>PEAR Install</title><sbr/></formalpara>
            <para>
            Download S2Erd-version.tgz, and run pear install.
            </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% pear install /path/to/S2Erd-version.tgz
install ok: channel://pear.php.net/S2Erd-version

% pear list 
・・・
S2Erd             version       state
・・・
%
]]></programlisting>

        </blockquote>

        <sbr/>
        <blockquote><formalpara><title>Prepare zf.ini</title><sbr/></formalpara>
            <para>
                Create the following zf.ini file in your home directory.
            </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% cat ~/.zf.ini
basicloader.classes.0 = "seasar_erd_util_zend_Manifest"
php.include_path = ".:/usr/lib/php:/path/to/zf/project/library"
%
]]></programlisting>
        </blockquote>

    </sect2>

    <sbr/>
    <sect2><title>Setup of S2Erd</title>
        <para>
        Create the s2erd.php file that sets S2Erd information in the application/configs direcotry.
        </para>
        <itemizedlist>
            <listitem><ulink url="https://www.seasar.org/svn/s2container.php5/trunk/s2zf1102/application/configs/s2erd.php">application/configs/s2erd.php</ulink>
                <itemizedlist>
                    <listitem>
                        Set the Parser class for the ERD design tool used.<sbr/>
                        Set the path to the data file of the ERD design tool as a setting to the Parser class. 
                    </listitem>
                    <listitem>
                        Set the output directory and the template file of the Table class, etc.
                        as a setting of the Generator class that generates PHP source of the Zend_Db_Table class
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </sect2>

    <sbr/>
    <sect2 id="misc.s2erd.autoload"><title>Autoload Setting</title>
        <para>
        The Table class of PHP can be defined directly from the data of the ERD design tool by setting an auto loader for S2Erd. <sbr/>
        While the table definition is unfixed, you can read the table class definition by this auto loader. 
        After fixing the table definition, output the Table class definition to the file by <link linkend="misc.s2erd.tool">Zend_Tool command</link>.
        </para>

        <blockquote><formalpara><title>Create the s2erd_autoload.php</title><sbr/></formalpara>
            <para>
            Create the  s2erd_autoload.php that sets Autoload for S2Erd in the application/configs directory. 
            </para>
            <itemizedlist>
                <listitem><ulink url="https://www.seasar.org/svn/s2container.php5/trunk/s2zf1102/application/configs/s2erd_autoload.php">application/configs/s2erd_autoload.php</ulink></listitem>
            </itemizedlist>
        </blockquote>

        <sbr/>
        <blockquote><formalpara><title>Edit the Bootstrap.php</title><sbr/></formalpara>
            <para>
            Require the s2erd_autoload.php in the application Bootstrap.php file. (int the _initAutoload method)
            </para>
            <itemizedlist>
                <listitem><ulink url="https://www.seasar.org/svn/s2container.php5/trunk/s2zf1102/application/Bootstrap.php">application/Bootstrap.php</ulink></listitem>
            </itemizedlist>
        </blockquote>
    </sect2>

    <sbr/>
    <sect2 id="misc.s2erd.tool"><title>Zend_Tool command</title>
        <para>
        Run the zf command of Zend_Tool, and confirm whether the following command is added. 
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% zf.sh --help
  . . .
  . . .
  . . .

  ERMModel
    zf create erm-model erm-file[=<project/var/db/project.erm>]

  MWBModel
    zf create mwb-model schema[=mydb] mwb-file[=<project/var/db/project.mwb>]

%
]]></programlisting>

        <para>
        Run the command for the ERD design tool used. 
        the table class definition file is output to the application/models/DbTable directory. 
        When "--pretend" is added as an option of the zf command, the table class definition is output to a standard output. 
        </para>
        
        <para>
        The data file of the following ERD design tool is prepared in the <ulink url="https://www.seasar.org/svn/s2container.php5/trunk/s2zf1102/var/db">var/db</ulink> directory as a sample. 
        Please refer to the sample data base in <ulink url="http://framework.zend.com/manual/en/zend.db.adapter.html#zend.db.adapter.example-database">the Zend_Db document</ulink> for the table definition. 
        </para>

        <itemizedlist>
            <listitem>project.mwb (<ulink url="http://wb.mysql.com/">MySQL Workbech</ulink>)</listitem>
            <listitem>project.erm (<ulink url="http://ermaster.sourceforge.net/index.html">ER Master</ulink>)</listitem>
        </itemizedlist>

        <para>
        The MWBModel command is executed as an example. 
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% ls application/models/DbTable
% zf create mwb-model s2

MySQL Workbench File:   /project/var/db/project.mwb

create : application/models/DbTable/Abstract.php
create : application/models/DbTable/Accounts.php
create : application/models/DbTable/Bugs.php
create : application/models/DbTable/BugsProducts.php
create : application/models/DbTable/Products.php

% cat application/models/DbTable/Bugs.php
<?php
/**
 * @S2Component('autoBinding' => 'none')
 */
class Model_DbTable_Bugs extends Model_DbTable_Abstract {

    const PNAME = 'bugs';
    const LNAME = 'bugs';
    const COMMENT = '';

    public static $FIELDS = array(
        'bug_id' => array(
              'pname' => 'bug_id',
              'lname' => 'bug_id',
              'type' => 'INT',
              'type_opt' => null,
              'length' => -1,
              'scale' => -1,
              'precision' => -1,
              'nn' => true,
              'pk' => true,
              'fk' => false,
              'default' => '',
              'comment' => '',
              'options' => null),

              . . . . . 
              . . . . . 
              . . . . . 

        'verified_by' => array(
              'pname' => 'verified_by',
              'lname' => 'verified_by',
              'type' => 'VARCHAR',
              'type_opt' => null,
              'length' => 100,
              'scale' => -1,
              'precision' => -1,
              'nn' => false,
              'pk' => false,
              'fk' => true,
              'default' => '',
              'comment' => '',
              'options' => null));

    public static $FILTERS = array(
        'bug_id' => array('Int'));

    public static $VALIDATORS = array(
        'bug_id' => array('presence' => 'required', 'Int'),
        'bug_description' => array('allowEmpty' => 'true', array('StringLength', 0, 100, 'UTF-8')),
        'bug_status' => array('allowEmpty' => 'true', array('StringLength', 0, 20, 'UTF-8')),
        'reported_by' => array('allowEmpty' => 'true', array('StringLength', 0, 100, 'UTF-8')),
        'assigned_to' => array('allowEmpty' => 'true', array('StringLength', 0, 100, 'UTF-8')),
        'verified_by' => array('allowEmpty' => 'true', array('StringLength', 0, 100, 'UTF-8')));

    protected $_name = 'bugs';
    protected $_primary = array('bug_id');
    protected $_sequence = false;

    protected $_dependentTables = array('Model_DbTable_BugsProducts');

    protected $_referenceMap = array(
        'ReportedBy' => array(
           'columns' => array('reported_by'),
           'refTableClass' => 'Model_DbTable_Accounts',
           'refColumns' => array('account_name')),
        'AssignedTo' => array(
           'columns' => array('assigned_to'),
           'refTableClass' => 'Model_DbTable_Accounts',
           'refColumns' => array('account_name')),
        'VerifiedBy' => array(
           'columns' => array('verified_by'),
           'refTableClass' => 'Model_DbTable_Accounts',
           'refColumns' => array('account_name')));

}
%
]]></programlisting>

    </sect2>

    <sbr/>
    <sect2><title>UnitTest of Table Model</title>
        <para>
        As a sample, create the UnitTest of the Table class of the accounts table.
        UnitTest file is  <ulink url="https://www.seasar.org/svn/s2container.php5/trunk/s2zf1102/tests/application/models/DbTable/AccountsTest.php">AccountsTest.php</ulink> in the <ulink url="https://www.seasar.org/svn/s2container.php5/trunk/s2zf1102/tests/application/models/DbTable/">tests/application/models/DbTable</ulink> directory.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Model_DbTable_AccountsTest extends PHPUnit_Framework_TestCase {

    public function testFetchAll() {
        $this->assertEquals(5, count($this->model->fetchAll()));
    }

    public function setUp() {
        $this->model = s2get('Model_DbTable_Accounts');
    }

    public function tearDown() {
        $this->model = null;
    }
}
]]></programlisting>

        <para>
        The result of UnitTest becomes the next. 
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% phpunit application/models/DbTable
PHPUnit 3.4.2 by Sebastian Bergmann.

.

Time: 1 second

OK (1 test, 1 assertion)
%
]]></programlisting>

        <para>
        Because the class definition is dynamically defined by <link linkend="misc.s2erd.autoload">Autoload of S2Erd</link>, 
        you can use Model_DbTable_Accounts class. (actually source file not exists.)
        </para>
    </sect2>


    <sbr/>
    <sect2><title>Using Table Model in Service class</title>
        <para>
         As a sample, create the service class that uses the Table model and the DB adaptor, 
         in the <ulink url="https://www.seasar.org/svn/s2container.php5/trunk/s2zf1102/application/services/">application/services</ulink> directory
         as <ulink url="https://www.seasar.org/svn/s2container.php5/trunk/s2zf1102/application/services/Sample.php">Sample.php</ulink>. 
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service_Sample {

    public function setModel(Model_DbTable_Bugs $model) {
        $this->model = $model;
    }

    public function setAdapter(Zend_Db_Adapter_Abstract $adapter) {
        $this->adapter = $adapter;
    }
    
    public function fetchAllBugs() {
        return $this->model->fetchAll()->toArray();
    }

    public function fetchProductBugDescriptions() {
        $select = $this->adapter->select()->from(array('bp' => Model_DbTable_BugsProducts::PNAME), array());
        $select->joinLeft(array('b' => Model_DbTable_Bugs::PNAME), 'b.bug_id = bp.bug_id', array('bug_description'));
        $select->joinLeft(array('p' => Model_DbTable_Products::PNAME), 'p.product_id = bp.product_id', array('product_name'));
        return $this->adapter->fetchAll($select);
    }
}
]]></programlisting>

        <para>
        Create the UnitTest of Sample class in <ulink url="https://www.seasar.org/svn/s2container.php5/trunk/s2zf1102/tests/application/services/">tests/application/services</ulink> directory as
        <ulink url="https://www.seasar.org/svn/s2container.php5/trunk/s2zf1102/tests/application/services/SampleTest.php">SampleTest.php</ulink>.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service_SampleTest extends PHPUnit_Framework_TestCase {

    public function testFetchAllBugs() {
        $this->assertEquals(3, count($this->service->fetchAllBugs()));
    }

    public function testFetchAllBugsWithAccounts() {
        $rows = $this->service->fetchProductBugDescriptions();
        $this->assertEquals(6, count($rows));
    }

    public function setUp() {
        require(APPLICATION_PATH . '/dicons/dicon.php'); 
        $this->service = s2get('Service_Sample');
    }

    public function tearDown() {
        $this->service = null;
    }
}
]]></programlisting>

        <para>
        The result of UnitTest becomes the next.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% phpunit application/services
PHPUnit 3.4.2 by Sebastian Bergmann.

..

Time: 0 seconds

OK (2 tests, 2 assertions)
%
]]></programlisting>

        <para>
        Please refer to "<link linkend="misc.zend.action">Using S2Container in the Action method</link>" for how to use the service class in the action controller. 
        </para>
    </sect2>
</sect1>

