<chapter id="aop"><title>S2AOP.PHP Reference</title>
  <sect1 id="aop.about"><title>The outline of S2AOP</title>
    <para>
      AOP, Aspect Oriented Programming, it is a technique which extracts the common logic distributed
      in two or more classes, and is woven in from the outside of a class.

    </para>
    <sect2><title>The Concept of AOP</title>
      <blockquote>
        <formalpara><title>Advice(MethodInterceptor)</title></formalpara>
        <para>
          Advice expresses the code inserted into a program.
          Advice may be called Interceptor.
        </para>

        <formalpara><title>Joinpoint(MethodInvocation)</title></formalpara>
        <para>
          Joinpoint expresses the point which combines target class and Advice.
          Advice can acquire the information on an argument or a method from Joinpoint.
        </para>

        <formalpara><title>Pointcut</title></formalpara>
        <para>
          Pointcut defines where Joinpoint is set up.
        </para>

        <formalpara><title>Aspect</title></formalpara>
        <para>
          Aspect associates Advice and Pointcut.
        </para>
      </blockquote>
    </sect2>
  </sect1>

  <sect1 id="aop.caution"><title>The notes on use of S2AOP</title>

    <itemizedlist>
      <listitem>
        The component specified with aspect tag is acquired from a container at the time of initialization of a container.
        Therefore, even if the instance attribute of the component specified with the aspect tag is prototype", 
        a new instance is not created whenever an aspected method is called.
      </listitem>
      <listitem>
            <itemizedlist>
            <listitem>
              If the class of a component implements abstract method, all the abstract method is applicable
            </listitem>
            <listitem>
              If  the class of a component does not implement abstract method, all the public method implemented in the class is applicable.
            </listitem>
          </itemizedlist>
      </listitem>
      <listitem>An aspect is applicable only to a public method.</listitem>
      <listitem>An aspect is inapplicable to an staic method.</listitem>
      <listitem>An aspect is inapplicable to final class and final method.</listitem>
      <listitem>An aspect cannot be applied when method name starts with underbar "_".</listitem>
      <listitem>
        An aspect cannot be applied when the Array which has a value in the default value of a method argument is set up.
        ( public function hoge($a = array('year' => 2007)) , etc)
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="aop.aspect"><title>Aspect using S2AopFactory</title>
    <para>
      By the create method of S2AopFactory class, the extended class of an aspect target class is generated and
      the instance which wove in the aspect is acquired.
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
public static function create(ReflectionClass $targetClass, array $aspects, array $args = array(), array $parameters = array()) 
]]></programlisting>
    <blockquote>
    <itemizedlist>
      <listitem>The 1st argument ： Aspect target class</listitem>
      <listitem>The 2nd argument ： Aspect woven in</listitem>
      <listitem>The 3rd argument ： Arguments of constructor method</listitem>
      <listitem>The 4th argument ： Extended parameter of S2Aop.PHP</listitem>
    </itemizedlist>
    </blockquote>
    <para>
      As an example, an aspect is applied to the following service classes.
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service {
    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>
  <para>
    TraceInterceptor is aspected to add method of Service class as follws.
  </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
seasar::util::ClassLoader::import(dirname(__FILE__) . '/classes');

$interceptor = new seasar::aop::interceptor::TraceInterceptor;
$pointcut    = new seasar::aop::Pointcut('^add$');
$aspect      = new seasar::aop::Aspect($interceptor, $pointcut);
$service     = S2AopFactory::create(new ReflectionClass('Service'), array($aspect));

print get_class($service) . PHP_EOL;
$result = $service->add(2, 3);
]]></programlisting>
      <blockquote>
        <formalpara><title>Interceptor</title></formalpara>
        <para>
          Interceptor is a class which implements seasar::aop::MethodInterceptor interface.
          These next interceptors are attached to S2Aop.
        </para>
        <itemizedlist>
          <listitem>seasar::aop::interceptor::TraceInterceptor <sbr/>
            TraceInterceptor is a interceptor for treating trace processing as "Crosscutting Concern".
          </listitem>
          <listitem>seasar::aop::interceptor::MockInterceptor <sbr/>
            MockInterceptor is a interceptor for doing the test using Mock simply.
          </listitem>
          <listitem>seasar::aop::interceptor::InterceptorChain <sbr/>
            InterceptorChain is a interceptor which makes two or more interceptors a group and
            thereby, reuse of interceptor is simplified.
          </listitem>
          <!--
          <listitem>seasar::aop::interceptor::AbstractAroundInterceptor <sbr/>
          </listitem>
          -->
        </itemizedlist>

        <formalpara id="aop.aspect.pointcut"><title>Pointcut</title></formalpara>
        <para>
          Pointcut is a class showing where MethodInterceptor is applied.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * Construct Pointcut
 * @param mixed $target
 */
seasar::aop::Pointcut::__construct($target)
]]></programlisting>
        <para>
          The regular expression character string which specifies Pointcut (or its Array),
          or ReflectionClass is passed to $target of a constructor argument.
          If ReflectionClass is passed, and if the class implements abstract method, all the abstract method is be Pointcut.
          If the class does not implement abstract method at all, all the public method implemented in the class except the following conditions is be Pointcut.
        </para>
        <itemizedlist>
          <listitem>
            The method which the parent class implements is excepted
          </listitem>
          <listitem>
            The method from which a name starts with "set", "get" and "is" is excepted.
          </listitem>
        </itemizedlist>

        <formalpara><title>Aspect</title></formalpara>
        <para>
          Aspect is a class which associates MethodInterceptor(Advice) and Pointcut.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * Construct Aspect
 * @param seasar::aop::MethodInterceptor $methodInterceptor
 * @param seasar::aop::Pointcut $pointcut
 */
seasar::aop::Aspect::__construct(MethodInterceptor $methodInterceptor, Pointcut $pointcut)
]]></programlisting>
        <para>
          MethodInterceptor and Pointcut are specified by a constructor argument.
        </para>

      </blockquote>
  </sect1>


  <sect1 id="aop.dicon"><title>Aspect using S2Container</title>
    <sect2><title>Using S2ApplicationContext</title>
      <para>
        If carrying out an aspect to a component using S2ApplicationContext, there is a method of setting up an automatic aspect or 
        setting up comment annotation in each class.
      </para>
      <blockquote>
        <formalpara><title>Automatic Aspect</title></formalpara>
        <para>
          If using <link linkend="dicon.application.autoaspect">the automatic aspect function of S2ApplictionContext</link>, an aspect is set up by an S2ApplictionContext::registerAspect method.<sbr/>
          As an example, you can apply Aspect to the following Service class.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service {
    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>
        <para>
          A Service class is imported by S2ApplicationContext::import method.
          A container is generated by S2ApplicationContext::create method and a Service component is acquired by a getComponent method.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
seasar::container::S2ApplicationContext::import(dirname(__FILE__) . '/classes');
seasar::container::S2ApplicationContext::registerAspect('/^Service$/', 'new seasar::aop::interceptor::TraceInterceptor', '^add$');
$container = seasar::container::S2ApplicationContext::create();
$service   = $container->getComponent('Service');

print get_class($service) . PHP_EOL;
$result = $service->add(2, 3);
]]></programlisting>
        <para>
          The component name to which an aspect is applied, Interceptor and Pointcut are set up by the argument of an S2ApplicationContext::registerAspect method.
        </para>

        <sbr/>
        <formalpara><title>Setup by Comment Annotation</title></formalpara>
        <para>
          <link linkend="dicon.application.annotation.aspect">@S2Aspect</link> annotation is used when comment annotation describes an aspect setup.
          @S2Aspect annotation can be described in a class or a method.
        </para>

        <para>
          As an example, it is as follows when describing annotation in a service class.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @S2Aspect('interceptor' => 'new seasar::aop::interceptor::TraceInterceptor',
 *           'pointcut'    => '^add$')
 */
class Service {
    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>

        <para>
          It is as follows when describing annotation in a method.
          "pointcut" is omissible.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service {
    /**
     * @S2Aspect('interceptor' => 'new seasar::aop::interceptor::TraceInterceptor')
     */
    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>

  <para>
    A Service class is imported by the S2ApplicationContext::import method.
    A container is generated by the S2ApplicationContext::create method and a Service component is acquired by the getComponent method.
  </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
seasar::container::S2ApplicationContext::import(dirname(__FILE__) . '/classes');
$container = seasar::container::S2ApplicationContext::create();
$service   = $container->getComponent('Service');

print get_class($service) . PHP_EOL;
$result = $service->add(2, 3);
]]></programlisting>

      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>Using S2ContainerFactory</title>
      <para>
        If using S2ContainerFactory, aspect setting is performed using a aspect tag by DICON file which is a definition file of S2Container.<sbr/>
        An aspect is applied to service class as an example.
      </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service {
    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>

       <para>
         An aspect is woven into a component.
         The name of Interceptor is described by a body of a aspect tag.
       </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR2.1//DTD S2Container//EN"
"http://www.seasar.org/dtd/components21.dtd">
<components>
    <component name="trace" class="seasar::aop::interceptor::TraceInterceptor"/>
    <component class="Service">
        <aspect pointcut="^add$">trace</aspect>
    </component>
</components>
]]></programlisting>

       <para>
         A container is generated using the above DICON file by the create method of S2ContainerFactory.
       </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
seasar::util::ClassLoader::import(dirname(__FILE__) . '/classes');
$container = seasar::container::factory::S2ContainerFactory::create('/path/to/diconファイル');
$service   = $container->getComponent('Service');

print get_class($service) . PHP_EOL;
$result = $service->add(2, 3);
]]></programlisting>
    </sect2>
  </sect1>

  <!-- ##################################################################### -->
  <sect1 id="aop.interceptor"><title>Interceptor prepared in S2AOP</title>
    <sect2 id="aop.interceptor.trace"><title>TraceInterceptor</title>   
      <blockquote>
        <formalpara><title>Using S2ApplicationContext</title></formalpara>
          <para>
            TraceInterceptor is Interceptor to handle trace processing as "Crosscutting Concern".<sbr/>
            As an example, an aspect is applied to the following service class.
          </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service {
    public function add($a, $b) {
        print __CLASS__ . ' called.' . PHP_EOL;
        return $a + $b;
    }
}
]]></programlisting>
          <para>
            The following execution script is made.
          </para>
          <itemizedlist>
            <listitem>
              A Service class is imported by the S2ApplicationContext::import method
            </listitem>
            <listitem>
              TraceInterceptor is aspected to a service component by the S2ApplicationContext::registerAspect method
            </listitem>
            <listitem>
              A container is generated by the S2ApplicationContext::create method
            </listitem>
            <listitem>
              A Service component is acquired by the S2Container::getComponent method.
            </listitem>
            <listitem>
              The add method of the Service component is carried out.
            </listitem>
          </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
seasar::container::S2ApplicationContext::import(dirname(__FILE__) . '/classes');
seasar::container::S2ApplicationContext::registerAspect('/^Service$/', 'new seasar::aop::interceptor::TraceInterceptor');
$container = seasar::container::S2ApplicationContext::create();
$service   = $container->getComponent('Service');

print get_class($service) . PHP_EOL;
$result = $service->add(2, 3);
]]></programlisting>

          <para>
            If you execute above script, when the add method of the service class was carried out, TraceInterceptor outputs log.
          </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% php context.php
Service_EnhancedByS2AOP
[INFO  ] seasar::aop::interceptor::TraceInterceptor::invoke - BEGIN Service->add(2,3)
Service called.
[INFO  ] seasar::aop::interceptor::TraceInterceptor::invoke - END   Service->add(2,3) : 5 : 0.0012331008911133
%
]]></programlisting>
      </blockquote>

      <blockquote>
        <formalpara><title>Using S2ContainerFactory</title></formalpara>
        <para>
          If using S2ContainerFactory, it's necessary to create the following DICON file.
          TraceInterceptor is aspected to a Service component using a spect tag.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR2.1//DTD S2Container//EN"
"http://www.seasar.org/dtd/components21.dtd">
<components>
    <component name="trace" class="seasar::aop::interceptor::TraceInterceptor"/>
    <component class="Service">
        <aspect>trace</aspect>
    </component>
</components>
]]></programlisting>

          <para>
            The following execution script is made.
          </para>
          <itemizedlist>
            <listitem>
              A Service class is imported by ClassLoader::import method
            </listitem>
            <listitem>
              DICON file is read by the S2ContainerFactory::create method
            </listitem>
            <listitem>
              A Service component is acquired by the S2Container::getComponent method.
            </listitem>
            <listitem>
              The add method of the Service component is carried out.
            </listitem>
          </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
seasar::util::ClassLoader::import(dirname(__FILE__) . '/classes');
$container = seasar::container::factory::S2ContainerFactory::create(dirname(__FILE__) . '/example.dicon');
$service = $container->getComponent('Service');

print get_class($service) . PHP_EOL;
$result = $service->add(2, 3);
]]></programlisting>

          <para>
            If you execute above script, when the add method of the service class was carried out, TraceInterceptor outputs log.
          </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% php factory.php
Service_EnhancedByS2AOP
[INFO  ] seasar::aop::interceptor::TraceInterceptor::invoke - BEGIN Service->add(2,3)
Service called.
[INFO  ] seasar::aop::interceptor::TraceInterceptor::invoke - END   Service->add(2,3) : 5 : 0.0012331008911133
%
]]></programlisting>
      </blockquote>
      <note><title>NOTE</title>
        <para>This example is located in examples/aop/interceptor/trace.</para>
      </note>

    </sect2> 

    <!-- ################################################################### -->
    <sbr/>
    <sect2 id="aop.interceptor.mock"><title>MockInterceptor</title>   
      <blockquote>
        <formalpara><title>Using S2ApplicationContext</title></formalpara>
          <para>
            MockInterceptor is Interceptor to easily perform a test using Mock.
            When using S2ApplicationContext, the return value of a method and the exception which is thrown 
            are set up using comment annotation.
          </para>
          <itemizedlist>
            <listitem>Notation of annotation : @S2Mock</listitem>
            <listitem>Argument
              <itemizedlist>
                <listitem>return : A return value is set up. This value is treated as PHP Expression. (It is processed with an eval function.)</listitem>
                <listitem>throw : The exception which is thrown is set up. This value is treated as PHP Expression.</listitem>
              </itemizedlist>
            </listitem>
            <listitem>Annotation point : method</listitem>
          </itemizedlist>

          <para>
            Carry out an aspect to the following service classes as an example.
          </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service {
    /**
     * @S2Mock('return' => '10')
     */
    public function add($a, $b) {
        print __CLASS__ . ' called.' . PHP_EOL;
        return $a + $b;
    }
    /**
     * @S2Mock('throw' => 'new seasar::exception::NotYetImplementedException("mock exception")')
     */
    public function sub($a, $b) {
        print __CLASS__ . ' called.' . PHP_EOL;
    }
}
]]></programlisting>
          <para>
            The following execution scripts are created.
          </para>
          <itemizedlist>
            <listitem>
              A Service class is imported by S2ApplicationContext::import method
            </listitem>
            <listitem>
              The aspect of the MockInterceptor is carried out to a service component by S2ApplicationContext::registerAspect method.
            </listitem>
            <listitem>
              A container is generated by S2ApplicationContext::create method.
            </listitem>
            <listitem>
              A Service component is acquired by an S2Container::getComponent method.
            </listitem>
            <listitem>
              The add and the sub method of an Service component are performed.
            </listitem>
          </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
seasar::container::S2ApplicationContext::import(dirname(__FILE__) . '/classes');
seasar::container::S2ApplicationContext::registerAspect('/^Service$/', 'new seasar::aop::interceptor::MockInterceptor');
$container = seasar::container::S2ApplicationContext::create();
$service = $container->getComponent('Service');

print $service->add(2, 3) . PHP_EOL;
try {
    $result = $service->sub(3, 2);
} catch(Exception $e) {
    print get_class($e) . ' : ' . $e->getMessage() . PHP_EOL;
}
]]></programlisting>

          <para>
            The above-mentioned script is performed.
            Execution of the add method of a service class will return 10 
            not as an actual calculation result(5) but as a Mock value.
            Execution of sub method will carry out a throw of the NotYetImplementedException.
          </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% php context.php
10
seasar::exception::NotYetImplementedException : mock exception
%
]]></programlisting>
      </blockquote>

      <blockquote>
        <formalpara><title>Using S2ContainerFactory</title></formalpara>
        <para>
          If using S2ContainerFactory, the following DICON file is created.
          The aspect of the MockInterceptor is carried out to a Service component using aspect tag.
          With an initMethod tag, a return value of an add method is set up by a setRetrunValue method.
          Moreover, to a sub method, the exception which is thrown is set up by a setThrowable method.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR2.1//DTD S2Container//EN"
"http://www.seasar.org/dtd/components21.dtd">
<components>
    <component name="mock" class="seasar::aop::interceptor::MockInterceptor">
        <initMethod name="setReturnValue">
            <arg>"add"</arg>
            <arg>20</arg>
        </initMethod>
        <initMethod name="setThrowable">
            <arg>"sub"</arg>
            <arg>new seasar::exception::NotYetImplementedException('mock exception')</arg>
        </initMethod>
    </component>

    <component class="Service">
        <aspect>mock</aspect>
    </component>
</components>
]]></programlisting>
          <para>
            If a setup of Mock value is omitted, a setup of comment annotation is reflected.
          </para>

          <para>
            The following execution scripts are created.
          </para>
          <itemizedlist>
            <listitem>
              A Service class is imported by ClassLoader::import method
            </listitem>
            <listitem>
              DICON file is read by the S2ContainerFactory::create method
            </listitem>
            <listitem>
              A Service component is acquired by the S2Container::getComponent method.
            </listitem>
            <listitem>
              The add and the sub method of an Service component are performed.
            </listitem>
          </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
seasar::util::ClassLoader::import(dirname(__FILE__) . '/classes');
$container = seasar::container::factory::S2ContainerFactory::create(dirname(__FILE__) . '/example.dicon');
$service = $container->getComponent('Service');

print $service->add(2, 3) . PHP_EOL;
try {
    $result = $service->sub(3, 2);
} catch(Exception $e) {
    print get_class($e) . ' : ' . $e->getMessage() . PHP_EOL;
}
]]></programlisting>

          <para>
            The above-mentioned script is performed.
            Execution of the add method of a service class will return 20 
            not as an actual calculation result(5) but as a Mock value.
            Execution of sub method will carry out a throw of the NotYetImplementedException.
          </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% php factory.php
20
seasar::exception::NotYetImplementedException : mock exception
%
]]></programlisting>
      </blockquote>
      <note><title>NOTE</title>
        <para>This Example is located in examples/aop/interceptor/mock</para>
      </note>

    </sect2> 

    <sbr/>
    <sect2 id="aop.interceptor.chain"><title>InterceptorChain</title>   
      <para>
        InterceptorChain group-izes two or more Interceptor. Thereby, reuse of Interceptor is made easy.<sbr/>
        As an example, your can set TraceInterceptor and MockInterceptor to InterceptorChain and carry out an aspect to the following service class.
      </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service {
    public function add($a, $b) {
        print __CLASS__ . ' called.' . PHP_EOL;
        return $a + $b;
    }
}
]]></programlisting>

      <para>
        The following DICON files are created.
        The aspect of the chain component is carried out to a Service component using aspect tag.
        By chain component, the trace component and mock component are registered into InterceptorChain using an initMethod tag.
        Moreover, a trace component and mock component are also registered, respectively.
      </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR2.1//DTD S2Container//EN"
"http://www.seasar.org/dtd/components21.dtd">
<components>
    <component class="Service">
        <aspect>chain</aspect>
    </component>

    <component name="chain" class="seasar::aop::interceptor::InterceptorChain">
        <initMethod name="add"><arg>trace</arg></initMethod>
        <initMethod name="add"><arg>mock</arg></initMethod>
    </component>

    <component name="trace" class="seasar::aop::interceptor::TraceInterceptor"/>
    <component name="mock" class="seasar::aop::interceptor::MockInterceptor">
        <initMethod name="setReturnValue">
            <arg>"add"</arg>
            <arg>20</arg>
        </initMethod>
    </component>
</components>
]]></programlisting>
        <para>
          The following execution scripts are created.
        </para>
        <itemizedlist>
          <listitem>
            A Service class is imported by ClassLoader::import method
          </listitem>
          <listitem>
            DICON file is read by the S2ContainerFactory::create method
          </listitem>
          <listitem>
            A Service component is acquired by the S2Container::getComponent method.
          </listitem>
          <listitem>
            The add method of an Service component is performed.
          </listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
seasar::util::ClassLoader::import(dirname(__FILE__) . '/classes');
$container = seasar::container::factory::S2ContainerFactory::create(dirname(__FILE__) . '/example.dicon');
$service = $container->getComponent('Service');

print $service->add(2, 3) . PHP_EOL;
]]></programlisting>

        <para>
            The above-mentioned script is performed.
            when the add method of the service class was carried out, TraceInterceptor outputs log
            And add method  will return 20, not as an actual calculation result(5) but as a Mock value.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% php factory.php
[INFO  ] seasar::aop::interceptor::TraceInterceptor::invoke - BEGIN Service->add(2,3)
[INFO  ] seasar::aop::interceptor::TraceInterceptor::invoke - END   Service->add(2,3) : 5 : 0.0012331008911133
20
%
]]></programlisting>
      <note><title>NOTE</title>
        <para>This Example is located in examples/aop/interceptor/chain.</para>
      </note>
    </sect2> 

    <sbr/>
    <sect2 id="aop.interceptor.custom"><title>Implementing Interceptor</title>   
      <para>
        When carrying out custom-made implementing of Interceptor, the class which implements the following interface is created.
      </para>

      <itemizedlist>
        <listitem>seasar::aop::MethodInterceptor
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
namespace seasar::aop;
interface MethodInterceptor {
    /**
     * @param MethodInvocation $invocation
     */
    function invoke(MethodInvocation $invocation);
}
]]></programlisting>
        </listitem>
      </itemizedlist>

      <para>
        Following sample Interceptor is created.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class SampleInterceptor implements seasar::aop::MethodInterceptor {
    public function invoke(seasar::aop::MethodInvocation $invocation){

        print 'Before' . PHP_EOL;            // <-- Processing before calling following Interceptor or a following actual method

        $result = $invocation->proceed();

        print 'After' . PHP_EOL;             // <-- Processing after calling following Interceptor or a following actual method

        return $result;
    }
}
]]></programlisting>
      <para>
        Execution of MethodInvocation::proceed method will call following Interceptor or a following actual method.
        If two or more Aspects are defined as one component, as-follows execution is carried out.
      </para>
      <itemizedlist>
        <listitem>The Before part of MethodInterceptor is performed in order of registration of Aspect.</listitem>
        <listitem>After performing the Before part of the last MethodInterceptor, a component's own method is called.</listitem>
        <listitem>The After portion of MethodInterceptor is performed by the order of reverse of registration of Aspect.</listitem>
      </itemizedlist>

      <para>
        The instance for an aspect, ReflectionMethod, method arguments, etc. are acquirable through <link linkend="aop.invocation">MethodInvocation</link> passed by the argument of MethodInterceptor::invoke method.
      </para>
    </sect2> 
    
  </sect1>
  <sect1 id="aop.invocation"><title>MethodInvocation API Reference</title>
    <para>
      MethodInvocation instance is passed as an argument of the invoke method of MethodInterceptor.
      MethodInvocation manages Interceptors and performs the call of sequential execution and the method for an aspect.
      The instance for an aspect, ReflectionMethod, method arguments, etc. are acquirable through MethodInvocation instance.
    </para>

    <blockquote>

      <formalpara><title>MethodInvocation::proceed method</title></formalpara>
      <para>
        Interceptors and an actual method are called.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @return mixed
 */
public function proceed();
]]></programlisting>

      <formalpara><title>MethodInvocation::getThis method</title></formalpara>
      <para>
        Instance for an aspect is returned.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @return object
 */
public function getThis();
]]></programlisting>

      <formalpara><title>MethodInvocation::getMethod method</title></formalpara>
      <para>
        ReflectionMethod of the method to which an aspect is applied is returned.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @return ReflectionMethod
 */
public function getMethod();
]]></programlisting>

      <formalpara><title>MethodInvocation::getTargetClass method</title></formalpara>
      <para>
        ReflectionClass of the class to which an aspect is applied is returned.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @return ReflectionClass
 */
public function getTargetClass();
]]></programlisting>

      <formalpara><title>MethodInvocation::getArguments method</title></formalpara>
      <para>
        Arguments of the method to which an aspect is applied is returned.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @return array
 */
public function getArguments();
]]></programlisting>

      <formalpara><title>MethodInvocation::getParameter method</title></formalpara>
      <para>
        The extended parameter for S2Aop.PHP is returned.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @param string $name
 * @return mixed
 */
public function getParameter($name);
]]></programlisting>

    </blockquote>
  </sect1>

  <sect1 id="aop.config"><title>S2AOP Configuration file</title>
    <para>
      Various setup of S2AOP is set up as a property of seasar::aop::Config class.
    </para>
    <blockquote>

        <formalpara><title>ENHANCED_CLASS_GENERATOR</title></formalpara>
        <para>
          The Generator class which generates the extended class for weaving in an aspect is specified.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::aop::Config::$ENHANCED_CLASS_GENERATOR = 'seasar::aop::EnhancedClassGenerator';
]]></programlisting>

        <formalpara id="aop.config.caching"><title>CACHING</title></formalpara>
        <para>
          It is set up whether the extended class generated in order to weave in aspect is outputted to a file.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::aop::Config::$CACHING = false;
]]></programlisting>

        <formalpara><title>CACHE_DIR</title></formalpara>
        <para>
          The output directory in the case of outputting the extended class generated in order to weave in aspect to a file is set up.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::aop::Config::$CACHE_DIR = null;
]]></programlisting>

    </blockquote>    
  </sect1>
</chapter>

