<chapter id="misc"><title>MISC</title>
  <sect1 id="misc.spec"><title>Functional comparison of S2Container-1.2 and S2Container-2.0</title>
    <blockquote>
      <table frame='all'><title>Functional comparison table of S2Container-1.2 and S2Container-2.0</title>
        <tgroup cols='3' align='left' colsep='1' rowsep='1'>
          <colspec colwidth="2*" align="center" nowrap="1"/>
          <colspec colwidth="4*"/>
          <colspec colwidth="4*"/>
          <thead>
            <row>
              <entry align="center">Function</entry>
              <entry align="center">S2Container-1.2</entry>
              <entry align="center">S2Container-2.0</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Property Injection</entry>
              <entry>none</entry>
              <entry><link linkend="dicon.di.auto.property">avilable</link></entry>
            </row>
            <row>
              <entry>Setter Injection</entry>
              <entry>available</entry>
              <entry><link linkend="dicon.di.auto.setter">available</link></entry>
            </row>
            <row>
              <entry>Constructor Injection</entry>
              <entry>available</entry>
              <entry><link linkend="dicon.di.auto.constructor">available</link></entry>
            </row>
            <row>
              <entry>Method Injection</entry>
              <entry>InitMethod, DestroyMethod</entry>
              <entry><link linkend="dicon.di.manual.initmethod">InitMethod</link></entry>
            </row>
            <row>
              <entry>Instance Type</entry>
              <entry>singleton, prototype, outer, request, session</entry>
              <entry><link linkend="dicon.instance">singleton, prototype</link></entry>
            </row>
            <row>
              <entry>Binding Type</entry>
              <entry>auto, constructor, property, none</entry>
              <entry><link linkend="dicon.binding">auto, none</link></entry>
            </row>
            <row>
              <entry>Annotation</entry>
              <entry>extension Annotation, annotation function of S2ContainerApplicationContextclass</entry>
              <entry><link linkend="misc.annotation">unifies to seasar::util:Annotation class</link></entry>
            </row>
            <row>
              <entry>バンドル Interceptor</entry>
              <entry>
                S2Container_TraceInterceptor <sbr/>
                S2Container_MockInterceptor <sbr/>
                S2Container_DelegateInterceptor <sbr/>
                S2Container_PrototypeDelegateInterceptor <sbr/>
                S2Container_ThrowsInterceptor <sbr/>
                S2Container_TraceThrowsInterceptor <sbr/>
                S2Container_InterceptorChain
              </entry>
              <entry>
                seasar::aop::interceptor::TraceInterceptor <sbr/>
                seasar::aop::interceptor::MockInterceptor <sbr/>
                seasar::aop::interceptor::InterceptorChain
              </entry>
            </row>
            <row>
              <entry>default Pointcut</entry>
              <entry>
                All the public methods of implemented Interface. Nothing when Interceptor is not implemented at all.
              </entry>
              <entry>
                All the public methods of implemented Interface.
                If Interface is not implemented at all, they are all the methods which the class implements.
                However, the method from which a name begins in set, get, and is is excepted.
              </entry>
            </row>
            <row>
              <entry>ClassLoader</entry>
              <entry>S2ContainerClassLoader, S2ContainerApplicationContext class</entry>
              <entry><link linkend="misc.classloader">seasar::util::ClassLoader class</link></entry>
            </row>
            <row>
              <entry>Singleton S2Container function</entry>
              <entry>S2Container_SingletonS2containerFactory class</entry>
              <entry>Singleton S2Cotainer function of <link linkend="dicon.application.singleton">S2ApplicationContext class</link></entry>
            </row>
            <row>
              <entry>Log function</entry>
              <entry>available</entry>
              <entry><link linkend="misc.s2log">available</link></entry>
            </row>
            <row>
              <entry>Cache function of S2Container</entry>
              <entry>availavle</entry>
              <entry>none</entry>
            </row>
            <row>
              <entry>Cache function of S2AOP</entry>
              <entry>availavle</entry>
              <entry><link linkend="aop.config.caching">availavle</link></entry>
            </row>
            <row>
              <entry>Automatic registration function of component</entry>
              <entry>
                Automatic registration function of component as expanded functions, 
                import function of S2ContainerApplicationContext</entry>
              <entry><link linkend="dicon.application.import">unifies to import function of S2ApplicationContext class</link></entry>
            </row>
            <row>
              <entry>Automatic registration function of Aspect</entry>
              <entry>
                Automatic registration function of Aspect as expanded functions,
                registerAspect function of S2ContainerApplicationContext</entry>
              <entry><link linkend="dicon.application.autoaspect">unifies to registerAspect function of S2ApplicationContext class</link></entry>
            </row>
            <row>
              <entry>The registration name of component</entry>
              <entry>component name, class name</entry>
              <entry><link linkend="dicon.s2container.component">component name, class name with namespace, class name, class name which first letter is lowercased</link></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </blockquote>
  </sect1>

  <sect1 id="misc201"><title>Using S2Container in component</title>
    <para>
      When the component is dependent on S2Container into which it is registered, S2Container instance can be acquired by Property Injection or Setter Injection.
      The component name of S2Container is "container".<sbr/>
      The following service classes are created as an example.
      S2Container instance is be DI by automatic Property Injection.
    </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service {
    public $container = 'S2Binding container';
    //public $container = 'S2Binding seasar::container::S2Container';

    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>

    <para>
        An execution script is created as follows.
    </para>  

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');

seasar::container::S2ApplicationContext::import(dirname(__FILE__) . '/classes');
$container = seasar::container::S2ApplicationContext::create();
$service   = $container->getComponent('Service');

print get_class($service->container) . PHP_EOL;

]]></programlisting>
    <note><title>NOTE</title>
      <para>This Example is located in examples/misc/s2container</para>
    </note>

  </sect1>



  <!-- ##################################################################### -->
  <sect1 id="misc.s2log"><title>Log setup of S2Container</title>
    <para>
      In S2Container, Logger instance is acquired by getLogger method of S2Logger class as follows, and a log output is performed.
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');

seasar::log::S2Logger::getLogger()->debug('debug message.');
]]></programlisting>

    <sect2><title>S2Logger</title>
      <para>
        In S2Container, Logger instance which performs a log output is acquired through seasar::log::S2Logger class.
        S2Logger::getLogger method returns the instance of SimpleLogger by a default.
        LoggerFactory which generates Logger instance, a level setup of a log output, etc. are set up as a property of seasar::Config class.
      </para>

      <blockquote>
        <formalpara><title>LOGGER_FACTORY</title></formalpara>
        <para>
          The LoggerFactory class which generates Logger instance to be used is specified.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$LOGGER_FACTORY = 'seasar::log::impl::SimpleLoggerFactory';
]]></programlisting>

        <formalpara><title>LOG_LEVEL</title></formalpara>
        <para>
          The level of a log output is set up.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::DEBUG;
]]></programlisting>

        <formalpara><title>DEBUG_EVAL</title></formalpara>
        <para>
          If a log output level is DEBUG setup, the log output of the Expression processed with an eval function is carried out.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$DEBUG_EVAL = false;
]]></programlisting>
      </blockquote>
    </sect2>

    <sect2><title>SimpleLogger</title>
      <para>
        SimpleLogger displays a log on standard output by a default.
        A log level can set up the following six type. DEBUG, NOTICE, INFO, WARN, ERROR, FATAL
      </para>

      <blockquote>
        <formalpara><title>LOGGER_FACTORY</title></formalpara>
        <para>
        SimpleLoggerのLoggerFactoryはSimpleLoggerFactoryです。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$LOGGER_FACTORY = 'seasar::log::impl::SimpleLoggerFactory';
]]></programlisting>

        <formalpara><title>LOG_LEVEL</title></formalpara>
        <para>
          The level of a log output is set up.
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::DEBUG;
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::NOTICE;
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::INFO;
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::WARN;
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::ERROR;
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::FATAL;
]]></programlisting>

        <formalpara><title>SIMPLE_LOG_FILE</title></formalpara>
        <para>
          The log file in the case of performing a log output to a file is set up.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$SIMPLE_LOG_FILE = null;
]]></programlisting>
      </blockquote>
    </sect2>
  </sect1>

  <!-- ##################################################################### -->
  <sect1 id="misc.annotation"><title>Annotation API Reference</title>
    <para>
      seasar::util::Annotation reads as annotation the comment and constant value which were described by the class.
      The read character string is processed with an eval function as PHP Array Expression.<sbr/>
      The service class annotated as follows is created as an example.
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @Sample('name' => 'seasar')
 */
class Service {
    const SAMPLE = '"name" => "seasar.php"';
}
]]></programlisting>

    <para>
       The execution script which acquires Annotation is as follows.
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');
seasar::util::ClassLoader::import(dirname(__FILE__) . '/classes');
seasar::util::Annotation::$CONSTANT = true;

$service = new ReflectionClass('Service');

$annotation = seasar::util::Annotation::get($service, '@Sample');
print_r($annotation);

$annotation = seasar::util::Annotation::get($service, 'SAMPLE');
print_r($annotation);
]]></programlisting>

    <para>
      If the above-mentioned script is performed, the value described by 
      commnet annotation and constant annotation is acquirable as an array value.
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% php example.php
Array
(
    [name] => seasar
)
Array
(
    [name] => seasar.php
)
%
]]></programlisting>
    <note><title>NOTE</title>
      <para>This Example is located in examples/misc/annotation</para>
    </note>

    <sbr/>
    <blockquote>
      <formalpara><title>COMMENT Setup</title></formalpara>
      <para>
         A setup which reads comment annotation.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::util::Annotation::$COMMENT = true;
]]></programlisting>

      <formalpara><title>CONSTANT Setup</title></formalpara>
      <para>
         A setup which reads constant annotation.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::util::Annotation::$CONSTANT = false;
]]></programlisting>

      <formalpara><title>Annotation::get method</title></formalpara>
      <para>
        Annotation is acquired.
        ReflectionClass, ReflectionMethod, and ReflectionProperty can be specified as the 1st argument.
        ReflectionClass is passed when acquiring class annotation or constant annotation.
        ReflectionMethod is passed when acquiring method annotation.
        ReflectionProperty is passed when acquiring property annotation.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @param ReflectionClass|ReflectionMethod|ReflectionProperty $reflection
 * @param string $annotation
 * @return array
 * @throw seasar::exception::AnnotationNotFoundException
 */
publi static function get($reflection, $annotation)
]]></programlisting>

      <formalpara><title>Annotation::has method</title></formalpara>
      <para>
        It is acquired whether annotation is described or not.
        ReflectionClass, ReflectionMethod, and ReflectionProperty can be specified as the 1st argument.
        ReflectionClass is passed when investigating class annotation or constant annotation.
        ReflectionMethod is passed when investigating method annotation.
        ReflectionProperty is passed when investigating property annotation.
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @param ReflectionClass|ReflectionMethod|ReflectionProperty $reflection
 * @param string $annotation
 * @return boolean
 */
publi static function has($reflection, $annotation)
]]></programlisting>

    </blockquote>
  </sect1>


  <!-- ##################################################################### -->
  <sect1 id="misc.classloader"><title>ClassLoader API Reference</title>
     <para>
       seasar::util::ClassLoader class searches the class file on a file system, 
       and loads a class definition through an autoload function.
       Import of a class is performed by the following method.
     </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::util::ClassLoader::import($path, array $namespace = array(), $strict = false, $pear = false, $recursive = true)
]]></programlisting>
    <blockquote>
        <itemizedlist>
          <listitem>1st argument : path to direcotry searched</listitem>
          <listitem>2nd argument : array of namespace</listitem>
          <listitem>
            3rd argument : In the case of true, The name space specified by $namespace is used.
            In the case of false, The searched subdirectory name is added to $namespace array one by one.
          </listitem>
          <listitem>
            4th argument : In the case of true, $namespace is imploded by "_" (underscore).
            In the case of false, $namespace is imploded by "::"
          </listitem>
          <listitem>
            5th argument : In the case of true, a directory is searched recursively.
            In the case of false, a subdirectory is not searched.
          </listitem>
        </itemizedlist>
    </blockquote>

     <para>
              The class file (.php, .class.php) and DICON file (.dicon) in the directory specified by the 1st argument are imported.
              The path of a class name and a class file is acquired in import.
              This information is used when a class definition is required in autoload function.
              A class name becomes a portion except the extension of a class file name.
              As an example, when a class file name is "S2Container.php" and "S2Container.class.php", "S2Container" becomes a class name.
     </para>
  </sect1>

  <!-- ##################################################################### -->
  <sect1 id="misc.pdo"><title>Database access using PDO</title>
    <sect2><title>Using a class which inherits PDO</title>
        <para>
        The class which inherits DO class is created.A data source is set up by the constructor of a class.
        </para>
        <para>As an example, the following SqlitePdo classe is created to /path/to/classes/SqlitePdo.php.</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class SqlitePdo extends ::PDO {
    public function __construct() {
        parent::__construct('sqlite:' DB_DIR . '/sqlite.db');
        $this->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }
}
]]></programlisting>

        <para>CdDao class which uses the created PDO class is created to /path/to/classes/CdDao.php.</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class CdDao {
    public $sqlitePdo = null;
    public function findAll() {
        $stmt = $sqlitePdo->prepare('select * from CD');
        $stmt->setFetchMode(PDO::FETCH_OBJ);
        $stmt->execute();
        return $stmt->fetchAll();
    }
}
]]></programlisting>

        <para>PDO class and CdDao class are imported by S2ApplicationContext.</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar::container::S2ApplicationCcontext as s2app;

s2app::import('/path/to/classes');
$cdDao = s2app::get('CdDao');
var_dump($cdDao->findAll());

]]></programlisting>
    </sect2>

    <sbr/>
    <sect2><title>PDO setup by DICON</title>
        <para>
          PDO is set up by a DICON file. 
          As an example, the following DICON file is created as /path/to/dicons/pdo.dicon.
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR2.1//DTD S2Container//EN"
"http://www.seasar.org/dtd/components21.dtd">
<components>
   <component name="sqlitePdo" class="PDO">
       <arg>return 'sqlite:' . DB_DIR . '/sqlite.db'</arg>
   </component>
</components>

]]></programlisting>

        <para>The DICON file and CdDao class which were created are imported by S2ApplicationContext.</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar::container::S2ApplicationCcontext as s2app;

s2app::import('/path/to/dicons');
s2app::import('/path/to/classes');
$cdDao = s2app::get('CdDao');
var_dump($cdDao->findAll());

]]></programlisting>
    </sect2>
  </sect1>



  &misc.pdointerceptor;
  &misc.strictinterceptor;
  &misc.zend;
  &misc.symfony;
</chapter>
