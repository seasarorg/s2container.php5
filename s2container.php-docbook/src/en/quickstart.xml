<chapter id="quickstart"><title>Quick Start</title>

  <!-- ################################################################### -->
  <sect1 id="setup"><title>Setup</title>
    <para>Please install S2Container.PHP according to an installation document first.</para>
  </sect1>


  <!-- ################################################################### -->
  <sect1 id="quick010"><title>Registration and getting of a component</title>
    <para>
    <link linkend="dicon.application.register">The s2component function</link> performs registration of a component.
    The s2component function registers a component using the register method of S2ApplicationContext class.
    You can get the registered component by the get method of S2ApplicationContext class.
    </para>
    <itemizedlist><listitem>quickstart010.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

class Action {}
s2component('Action');     // same as s2app::register('Action');

$action = s2app::get('Action');
var_dump($action);
]]></programlisting>

    <para>When specifying a component name, it specifies by the ComponentInfoDef instance which is a return value of the s2component function.</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

class Action {}
s2component('Action')->setName('act');

$action = s2app::get('act');
var_dump($action);
]]></programlisting>

    <note><title>NOTE</title>
      <para>This Example is located at "examples/quickstart/quickstart010.php".</para>
    </note>
  </sect1>


  <!-- ################################################################### -->
  <sect1 id="quick020"><title>Dependency Injection</title>
    <para>
    Next, let's inject Service component into Action component.
    </para>

    <para>
    Please create the following Action class in the classes directory.
    You can specify a component name by <link linkend="dicon.application.annotation.s2component">@S2Component annotation.</link>
    Moreover, please implement the $service property which receives the instance of Service class.
    By setting public accession to $service property, Service component will be injected to by <link linkend="dicon.di.auto.property">the property injection function</link>.
    Within the indexAction method, it can process using the injected Service component.
    </para>
    <itemizedlist><listitem>classes/Action.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
/**
 * @S2Component('name' => 'act')
 */
class Action{
    public $service = null;
    public function indexAction() {
        $result = $this->service->add(1, 2);
    }
}
]]></programlisting>

    <para>
    Next, create the following Service class.
    </para>
    <itemizedlist><listitem>classes/Service.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class Service {
    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>

    <para>
    Requiring of Action class and Service class is performed by <link linkend="dicon.application.import">the import method of S2ApplicationContext class</link>.
    When Action component is taken out by the get method of S2ApplicationContext, the instance of the Service class will be injected into $service property of Action instance.
    </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

s2app::import(dirname(__FILE__) . '/classes');
$action = s2app::get('act');
var_dump($action);

]]></programlisting>

    <note><title>NOTE</title>
      <para>This Example is located at "examples/quickstart/quickstart020.php".</para>
    </note>
  </sect1>


  <!-- ################################################################### -->
  <sect1 id="quick030"><title>Auto Aspect</title>
    <para>
    You are able to register Aspect with <link linkend="dicon.application.autoaspect">the s2aspect function</link>.
    In the following example, TraceInterceptor is aspected to the add method of Service class.
    When Action component is taken out by the get method of S2ApplicationContext 
    and the indexAction method is performed, the trace log at the time of the add method of Service class being performed will be outputted.
    </para>
    <itemizedlist><listitem>quickstart030.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

s2app::import(dirname(__FILE__) . '/classes');
s2aspect('new seasar\aop\interceptor\TraceInterceptor')    // same as s2app::registerAspect('...');
  ->setPattern('/^Service$/')
  ->setPointcut('/^add$/');

$action = s2app::get('Action');
$action->indexAction();
]]></programlisting>

    <note><title>NOTE</title>
      <para>This Example is located at "examples/quickstart/quickstart030.php".</para>
    </note>
  </sect1>

  <!-- ################################################################### -->
  <sect1 id="quick040"><title>Aspect Anotation</title>
    <para>
    You can set up registration of Aspect also <link linkend="dicon.application.annotation.aspect">@S2Aspect annotation</link>.
    In the following example, TraceInterceptor is aspected to the findById method of Dao class.
    </para>
    <itemizedlist><listitem>classes/Dao.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class Dao {
    /**
     * S2Aspect('new seasar\aop\interceptor\TraceInterceptor')
     */
    public function findById($id) {
        return 2009;
    }
}
]]></programlisting>

    <para>
    Let's create the following Action class. The setDao setter method which receives the Dao component is implemented.
    Within the getById method of Action class, processing is performed using the findById method of Dao class.
    </para>

    <itemizedlist><listitem>classes/Action.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
/**
 * @S2Component('name' => 'act')
 */
class Action{
    private $dao = null;
    public function setDao(Dao $dao) {
        $this->dao = $dao;
    }
    public function getById() {
        return $this->dao->findById(10);
    }
}
]]></programlisting>

    <para>
    When Action component is taken out by the get method of S2ApplicationContext and the getById method is performed,
    the trace log at the time of the findById method of Dao class being performed will be outputted.
    </para>
    <itemizedlist><listitem>quickstart030.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

s2app::import(dirname(__FILE__) . '/classes');
$action = s2app::get('Action');
$action->getById();
]]></programlisting>

    <note><title>NOTE</title>
      <para>This Example is located at "examples/quickstart/quickstart040.php".</para>
    </note>
  </sect1>  


  <!-- ################################################################### -->
  <sect1 id="quick050"><title>Setup with DICON file</title>
    <para>Let's set up the before-mentioned all setting by DICON file.</para>
    <itemizedlist><listitem>quickstart050.dicon</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR//DTD S2Container//EN" "components21.dtd">
<components>
    <component class="Action"/>
    <component class="Service">
        <aspect pointcut="/^add$/">trace</aspect>
    </component>
    <component class="Dao">
        <aspect pointcut="/^findById$/">trace</aspect>
    </component>
    <component class="seasar\aop\interceptor\TraceInterceptor" name="trace"/>
</components>
]]></programlisting>

    <para>
    Reading of the DICON file is performed by the import method of S2ApplicationContext class.
    Requiring of the classes of the classes directory is performed by the import method of <link linkend="misc.classloader">seasar\util\ClassLoader class</link>.
    </para>
    <itemizedlist><listitem>quickstart050.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;
use seasar\util\ClassLoader as s2loader;

s2loader::import(dirname(__FILE__) . '/classes');
s2app::import(dirname(__FILE__) . '/quickstart050.dicon');

$action = s2app::get('Action');
$action->indexAction();
]]></programlisting>


    <note><title>NOTE</title>
      <para>This Example is located at "examples/quickstart/quickstart050.php".</para>
    </note>
  </sect1>

</chapter>
