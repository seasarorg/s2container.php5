
  <!-- ##################################################################### -->
  <sect1 id="misc.pdointerceptor"><title>PdoInterceptorを用いたデータベースアクセス</title>
    <sect2><title>Exampleについて</title>
      <para>
        PdoInterceptorを用いたデータベースアクセスのExampleは、example/misc/pdo にあります。
                各クラスファイル、設定ファイル、ディレクトリ構成は次になります。
                
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
example/misc/pdo/
 +-- classes/
 |    +-- Paginate.php
 |    +-- PdoInterceptor.php
 |    +-- SqlFileReader.php
 |    +-- StandardDto.php
 |    +-- StandardPdo.php
 +-- example/
 |    +-- config/
 |    |    +-- pdo.dicon
 |    |    +-- SqliteAPdo.php
 |    |    +-- SqliteBPdo.php
 |    +-- db/
 |         +-- example.sql
 |         +-- sqlite_a.db
 |         +-- sqlite_b.db
 |         +-- sqlite_c.db
 +-- tests/
      
]]></programlisting>

        clasesディレクトリにあるクラスがPdoInterceptorを使用するために必要となります。
      </para>
      
      <para>
        PDOのデータソース設定は、configディレクトリに次の3つのファイルで行っています。
                それぞれ、dbディレクトリのSqliteデータベースファイルをデータソースとしています。
        <itemizedlist>
          <listitem>SqliteAPdo.php : db/sqlite_a.db を使用するDSN設定</listitem>
          <listitem>SqliteBPdo.php : db/sqlite_b.db を使用するDSN設定</listitem>
          <listitem>pdo.dicon : db/sqlite_c.db を使用するDSN設定</listitem>
        </itemizedlist>
                各データベースはdb/example.sqlで構築しています。
                また、PDOの設定については、<link linkend="misc.pdo">PDOを用いたデータベースアクセス</link>を参照下さい。
      </para>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>PdoInterceptorの概要</title>
      <para>
        PdoInterceptorのアスペクト対象は、クラスとインターフェースです。クラスにアスペクトした場合は、Pointcutに
                適合したメソッドが実行されます。PdoInterceptorは、メソッドの戻り値が文字列の場合は、SQLクエリとして扱います。
                メソッドの戻り値がHash配列の場合は、SQL発行時のコンテキストとして扱います。
                メソッドの戻り値が配列の場合は、1番目の値をSQLクエリ、2番目の値をSQL発行時のコンテキストとして扱います。
                メソッドの戻り値が null の場合は、SQLファイルを探してSQLクエリを取得します。PdoIterceptorがインターフェースに
                アスペクトされている場合は、メソッドの呼び出しを行いません。メソッドの戻り値が null の場合と同様に、SQLファイルを探してSQLクエリを取得します。
      </para>
      
      <para>
        SQLクエリが取得できた場合は、データベースに発行して結果を メソッドの戻り値として return します。
                データベースへのSQLクエリの発行は、PDOのPrepared Statementが使用されます。 Prepared Statementにバインド
                されるvalueは、メソッド引数が使用されます。メソッドの戻り値が配列の場合は、2番目の値がバインドvalueとして扱われます。       
      </para>

      <para>
      PdoInterceptorは、自身が登録されているS2Containerに存在するPDOコンポーネントを使用してデータベースに接続します。
            デフォルトでは、PdoInterceptorクラスとStandardPdoクラスは、ネームスペースpdoに登録されています。
      </para>

      <para>
        PdoInterceptorには、O/Rマップ機能や自動SQL構築機能はありません。
      </para>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>クラスにアスペクトする</title>      
      <para>
        EMPテーブルにアクセスするDaoクラスを作成します。Daoクラスには、EMPテーブルから全件を取得するfindAllメソッドを実装します。
                メソッドの戻り値としてデータベースに発行するSQLクエリを返します。<sbr/>
        s2component関数で、Daoクラスをコンポーネントとして登録します。s2aspect関数でDaoクラスにpdo.interceptorをAspectします。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example010.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';

class Dao {
    public function findAll() {
        return 'select * from emp';
    }
}

s2component('Dao');
s2aspect('pdo.interceptor', '/Dao$/');

$dao = s2app::get('Dao');
$rows = $dao->findAll();
]]></programlisting>      
      </blockquote>
    </sect2>


    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>メソッドの戻り値でバインド値を設定する</title>      
      <para>
        EMPテーブルにアクセスするDaoクラスを作成します。Daoクラスには、EMPテーブルからIDで検索するfindByIdメソッドを実装します。
                メソッドの戻り値を配列とし、1番目の値にSQLクエリ、2番目の値にSQLクエリにバインドする値を配列で指定します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example010.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';

class Dao {
    public function findById() {
        $sql = 'select * from emp where EMPNO = :id';
        $context = array('id' => 7369);
        return array($sql, $context);
    }
}

s2component('Dao');
s2aspect('pdo.interceptor', '/Dao$/');

$dao = s2app::get('Dao');
$rows = $dao->findById();
]]></programlisting>      
      </blockquote>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>インターフェースにアスペクトする</title>      
      <para>
        EMPテーブルにアクセスするIDaoインターフェースを作成します。IDaoインターフェースには、EMPテーブルから全件を取得するfindAllメソッドを定義します。<sbr/>
        s2component関数で、Daoクラスをコンポーネントとして登録します。s2aspect関数でDaoクラスにpdo.interceptorをAspectします。 
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example020.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';

interface IDao {
    public function findAll();
}

s2component('IDao');
s2aspect('pdo.interceptor', '/Dao$/');

$dao = s2app::get('IDao');
$rows = $dao->findAll();
]]></programlisting>      
      </blockquote>

      <para>
        findAllメソッドが呼ばれた際に発行するSQLクエリをSQLファイルに記述します。SQLファイルはインターフェースファイルと同じディレクトリに配置します。
        SQLファイル名は、インターフェース名_メソッド名.sqlとなります。IDaoインターフェースのfindAllメソッドの場合は、IDao_findAll.sqlとなります。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/IDao_findAll.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from emp

]]></programlisting>      
      </blockquote>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>メソッド引数でバインド値を設定する</title>      
      <para>
        EMPテーブルにアクセスするIDaoインターフェースを作成します。IDaoインターフェースには、EMPテーブルからIDで検索するfindByIdメソッドを定義します。
        findByIdメソッドの引数で検索するIDを指定します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example020.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';

interface IDao {
    public function findById($id);
}

s2component('IDao');
s2aspect('pdo.interceptor', '/Dao$/');

$dao = s2app::get('IDao');
$rows = $dao->findAll();
]]></programlisting>      
      </blockquote>

      <para>
        findAllメソッドが呼ばれた際に発行するSQLクエリをSQLファイルに記述します。SQLファイルはインターフェースファイルと同じディレクトリに配置します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/IDao_findById.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from emp where EMPNO = :id

]]></programlisting>      
      </blockquote>

    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>@DTOアノテーションを使用する</title>      
      <para>
        PdoInterceptorは、デフォルトでは、StandardDtoクラスをPDO::FETCH_CLASSに指定します。
        StandardDtoクラスは、__callメソッドを実装しており、カラムへのアクセッサメソッドを提供します。
                カラム名が「ABC_XYZ」の場合、setAbcXyzメソッド、getAbcXyzメソッドでカラム値にアクセスすることができます。
      </para>
      <para>
        PDO::FETCH_CLASSを指定する場合は、@DTOアノテーションで行います。
              書式は次のようになります。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @DTO(DTOクラス名)
 */
]]></programlisting>

      <para>
                例として、EMPテーブルにアクセスするIDaoインターフェースを作成します。
        IDaoインターフェースには、EMPテーブルからIDで検索するfindByIdメソッドを定義します。
        PDO::FETCH_CLASSクラスには、BarDtoクラスを指定しています。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example030.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';

class BarDto extends StandardDto{}
interface IDao {
    /**
     * @DTO('BarDto')
     */
    public function findById($id);
}

s2component('IDao');
s2aspect('pdo.interceptor', '/Dao$/');

$dao = s2app::get('IDao');

$rows = $dao->findById(7369);
]]></programlisting>      
      </blockquote>

    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>DaoクラスでPDOを直接使用する</title>      
      <para>
      Daoクラスの中で直接PDOを使用する場合は、DaoクラスにPDOコンポーネントをインジェクションします。
            次の例では、CdDaoクラスにStandardPdoコンポーネントをセッターメソッドインジェクションしています。
      sampleTransactionメソッドでは、インジェクションされたPDOコンポーネントを使用してトランザクションを開始しています。
      </para>

      <blockquote>
        <itemizedlist>
          <listitem>example/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class CdDao {
    private $pdo = null;
    public function setPdo(Pdo $pdo) {
        $this->pdo = $pdo;
    }
    public function sampleTransaction() {
        try {
            \seasar\log\S2Logger::getInstance(__NAMESPACE__)->info('start transaction.', __METHOD__);
            $this->pdo->beginTransaction();
            $this->insert(10, 'aaa', 'bbb');
            $this->updateTitle(10, 'AAA');
            $this->delete(10);
            \seasar\log\S2Logger::getInstance(__NAMESPACE__)->info('commit transaction.', __METHOD__);
            $this->pdo->commit();
        } catch (Exception $e) {
            \seasar\log\S2Logger::getInstance(__NAMESPACE__)->info($e->getMessage(), __METHOD__);
            \seasar\log\S2Logger::getInstance(__NAMESPACE__)->info('rollback transaction.', __METHOD__);
            $this->pdo->rollBack();
        }
    }
    public function insert($id, $title, $content) {
        return "insert into CD values(:id, :title, :content)";
    }
    public function updateTitle($id, $title) {
        return "update CD set title = :title where id = :id";
    }
    public function delete($id) {
        return "delete from CD where id = :id";
    }
}
]]></programlisting>      
      </blockquote>

      <para>
            実行ファイルは次になります。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/example040.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/example/CdDao.php');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_b.db';
s2aspect('pdo.interceptor', '/Dao$/', '/^(insert|update|delete)/');

$dao = s2app::get('CdDao');
$rows = $dao->sampleTransaction();
]]></programlisting>      
      </blockquote>
    </sect2>

    <!-- ##################################################################### -->
    <sbr/>
    <sect2><title>Paginateクラスでページング処理</title>      
      <para>
        Paginateクラスは、データベースからのデータ取得の際にページングを行うユーティリティクラスです。    
                 例として、EMPテーブルにアクセスするEmpDaoクラスを作成します。EmpDaoクラスには、次のようなbyPaginateメソッドを実装します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>example/EmpDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class EmpDao {
    public function byPaginate(\Paginate $paginate) {
        if (!$paginate->hasTotal()) {
            list($row) = $this->findAllTotal($paginate);
            $paginate->setTotal($row->total);
        }
        return $this->findAll($paginate);
    }
    public function findAllTotal(\Paginate $paginate) {
        return 'select count(*) as total from EMP order by EMPNO';
    }

    public function findAll(\Paginate $paginate) {
        $sql = 'select * from EMP order by EMPNO limit :limit offset :offset';
        $context = array('limit' => $paginate->getLimit(), 'offset' => $paginate->getOffset());
        return array($sql, $context);
    }
}
]]></programlisting>      
      </blockquote>
      <para>
        byPaginateメソッドでは、まずfindAllTotalメソッドで全件数を取得し、paginateインスタンスに設定します。
        (Paginateクラスでページング処理を実施するために全件数が必要なため)
                その後、findAllメソッドを実行し、データを取得しています。findAllメソッドでは、limit/offset値にpaginateインスタンスが持つ
                情報を設定して、ページングを実施しています。
      </para>
      <para>
             次の処理を行うexample050.phpを作成します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>EmpDaoコンポーネントの取得</listitem>
        <listitem>Paginateインスタンスを生成し、1ページのアイテム数を設定</listitem>
        <listitem>byPaginateメソッドを実行</listitem>
        <listitem>次のページに遷移</listitem>
        <listitem>byPaginateメソッドを実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>example/example050.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('ROOT_DIR', dirname(dirname(__FILE__)));

use \seasar\container\S2ApplicationContext as s2app;
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/example/EmpDao.php');

StandardPdo::$DSN = 'sqlite:' . ROOT_DIR . '/example/db/sqlite_a.db';
s2aspect('pdo.interceptor', '/Dao$/', '/^find/');

$dao = s2app::get('EmpDao');
$paginate = new Paginate;
$paginate->setLimit(2);
$rows = $dao->byPaginate($paginate);
var_dump($rows);

$paginate->next();
$rows = $dao->byPaginate($paginate);
var_dump($rows);
]]></programlisting>      
      </blockquote>
   
    <!-- ##################################################################### -->
    <sbr/>
      <sect3><title>Paginate API リファレンス</title>
        <blockquote>

        <formalpara><title>Paginate::getTotalPage メソッド</title></formalpara>
        <para>
                  全件数を件数/ページ(limit)で割った全ページ数を返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getTotalPage();
]]></programlisting>

        <formalpara><title>Paginate::getPage メソッド</title></formalpara>
        <para>
                  現在のページ番号を返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getPage();
]]></programlisting>

        <formalpara><title>Paginate::setPage メソッド</title></formalpara>
        <para>
                  ページ番号を設定します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $page
     * @throw Exception
     */
    final public function setPage($page);
]]></programlisting>

        <formalpara><title>Paginate::getOffset メソッド</title></formalpara>
        <para>
                  現在のoffset位置を返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getOffset();
]]></programlisting>

        <formalpara><title>Paginate::setLimit メソッド</title></formalpara>
        <para>
         1ページあたりの件数を設定します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @prama integer $limit
     */
    final public function setLimit($limit);
]]></programlisting>

        <formalpara><title>Paginate::getTotal メソッド</title></formalpara>
        <para>
                  全件数を返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     * @throw Exception 全件数が未設定の場合にスローされます。
     */
    final public function getTotal();
]]></programlisting>

        <formalpara><title>Paginate::setTotal メソッド</title></formalpara>
        <para>
                  全件数を設定します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $total
     */
    final public function setTotal($total);
]]></programlisting>

        <formalpara><title>Paginate::setWindow メソッド</title></formalpara>
        <para>
                  ページウィンドウに表示するページ数を設定します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $window
     */
    final public function setWindow($window);
]]></programlisting>

        <formalpara><title>Paginate::next メソッド</title></formalpara>
        <para>
          1ページ進めます。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    final public function next();
]]></programlisting>

        <formalpara><title>Paginate::isNext メソッド</title></formalpara>
        <para>
                  次のページがあるかどうかを返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return boolean
     */
    final public function isNext();
]]></programlisting>

        <formalpara><title>Paginate::prev メソッド</title></formalpara>
        <para>
          1ページ戻ります。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    final public function prev();
]]></programlisting>

        <formalpara><title>Paginate::isPrev メソッド</title></formalpara>
        <para>
                  前のページがあるかどうかを返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return boolean
     */
    final public function isPrev();
]]></programlisting>

        <formalpara><title>Paginate::pages メソッド</title></formalpara>
        <para>
         window内に収まるページ番号を列挙します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return array
     */
    final public function pages() {
]]></programlisting>

        </blockquote>
      </sect3>
    </sect2>    
  </sect1>
