
  <!-- ##################################################################### -->
  <sect1 id="misc.pdointerceptor"><title>PdoInterceptorを用いたデータベースアクセス</title>
    <sect2><title>Exampleについて</title>
      <para>
        PdoInterceptorを用いたデータベースアクセスのExampleは、example/misc/pdo にあります。
                各クラスファイル、設定ファイル、ディレクトリ構成は次になります。
                
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
example/misc/pdo/
 +-- classes/
 |    +-- sample/
 |    +-- Paginate.php
 |    +-- PdoInterceptor.php
 |    +-- SqlFileReader.php
 +-- config/
 |    +-- pdo.dicon
 |    +-- SqliteAPdo.php
 |    +-- SqliteBPdo.php
 +-- db/
 |    +-- example.sql
 |    +-- sqlite_a.db
 |    +-- sqlite_b.db
 |    +-- sqlite_c.db
 +-- tests/
 +-- main.php
      
]]></programlisting>

        clasesディレクトリにある次の3つのクラスがPdoInterceptorを使用するために必要となります。
        <itemizedlist>
          <listitem>PdoInterceptor.php</listitem>
          <listitem>SqlFileReader.php</listitem>
          <listitem>Paginate.php</listitem>
        </itemizedlist>
      </para>
      
      <para>
        PDOのデータソース設定は、configディレクトリに次の3つのファイルで行っています。
                それぞれ、dbディレクトリのSqliteデータベースファイルをデータソースとしています。
        <itemizedlist>
          <listitem>SqliteAPdo.php : db/sqlite_a.db を使用するDSN設定</listitem>
          <listitem>SqliteBPdo.php : db/sqlite_b.db を使用するDSN設定</listitem>
          <listitem>pdo.dicon : db/sqlite_c.db を使用するDSN設定</listitem>
        </itemizedlist>
                各データベースはdb/example.sqlで構築しています。
                また、PDOの設定については、<link linkend="misc.pdo">PDOを用いたデータベースアクセス</link>を参照下さい。
      </para>
    </sect2>

    <sbr/>
    <sect2><title>PdoInterceptorの概要</title>
      <para>
        PdoInterceptorのアスペクト対象は、クラスとインターフェースです。クラスにアスペクトした場合は、Pointcutに
                適合したメソッドが実行されます。PdoInterceptorは、メソッドの戻り値が文字列の場合は、SQLクエリとして扱います。
                メソッドの戻り値が配列の場合は、1番目の値をSQLクエリ、2番目の値をSQL発行時のコンテキストとして
                扱います。メソッドの戻り値が null の場合は、SQLファイルを探してSQLクエリを取得します。PdoIterceptorがインターフェースに
                アスペクトされている場合は、メソッドの呼び出しを行いません。メソッドの戻り値が null の場合と同様に、SQLファイルを探してSQLクエリを取得します。
      </para>
      
      <para>
        SQLクエリが取得できた場合は、データベースに発行して結果を メソッドの戻り値として return します。
                利用可能なPDO設定が複数ある場合、どのDSNを使用するかを@S2Pdoアノテーションで指定します。
                データベースへのSQLクエリの発行は、PDOのPrepared Statementが使用されます。 Prepared Statementにバインド
                されるvalueは、メソッド引数が使用されます。メソッドの戻り値が配列の場合は、2番目の値がバインドvalueとして扱われます。       
      </para>

      <para>
        PdoInterceptorには、O/Rマップ機能や自動SQL構築機能は実装されていません。
      </para>
    </sect2>

    <sbr/>
    <sect2><title>クラスにアスペクトする</title>      
      <para>
        CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、CDテーブルから全件を取得するfindAllメソッドを実装します。
                メソッドの戻り値としてデータベースに発行するSQLクエリを返します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findAll() {
        return 'select * from CD';
    }
}

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample1.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>findAllメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample1.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::CdDao');
$rows = $dao->findAll();
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>インターフェースにアスペクトする</title>      
      <para>
        CDテーブルにアクセスするICdDaoインターフェースを作成します。ICdDaoインターフェースには、CDテーブルから全件を取得するfindAllメソッドを定義します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/ICdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class ICdDao {
    public function findAll();
}

]]></programlisting>      
      </blockquote>

      <para>
        findAllメソッドが呼ばれた際に発行するSQLクエリをSQLファイルに記述します。SQLファイルはインターフェースファイルと同じディレクトリに配置します。
        SQLファイル名は、インターフェース名_メソッド名.sqlとなります。ICdDaoインターフェースのfindAllメソッドの場合は、ICdDao_findAll.sqlとなります。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/ICdDao_findAll.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from CD

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample2.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>ICdDaoコンポーネントの取得</listitem>
        <listitem>findAllメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample2.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$rows = $dao->findAll();
var_dump($rows);

]]></programlisting>      
      </blockquote>

    </sect2>

    <sbr/>
    <sect2><title>メソッド引数でバインド値を設定する</title>      
      <para>
        CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、CDテーブルからIDで検索するfindByIdメソッドを実装します。
        findByIdメソッドの引数で検索するIDを指定します。SQLクエリへのIDの埋め込みは、「/*:変数名*/サンプルデータ」で行います。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findById($id) {
        return "select * from CD where id = /*:id*/5";    
    }
}

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample3.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>findByIdメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample3.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$rows = $dao->findById(1);
var_dump($rows);

]]></programlisting>      
      </blockquote>

    </sect2>

    <sbr/>
    <sect2><title>バインド値にオブジェクトを使用する</title>      
      <para>
        CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、CDテーブルからIDで検索したデータを取得するfindBySqlFile1メソッドを実装します。
                メソッドの戻り値として null を返します。PdoInterceptorはメソッドの戻り値が null の場合、SQLファイルからSQLクエリを取得します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findBySqlFile1($condition){}
}

]]></programlisting>      
      </blockquote>

      <para>
        findBySqlFile1メソッドが呼ばれた際に発行するSQLクエリをSQLファイルに記述します。SQLファイルはCdDaoクラスファイルと同じディレクトリに配置します。
        SQLファイル名は、クラス名_メソッド名.sqlとなります。CdDaoクラスのfindBySqlFile1メソッドの場合は、CdDao_findBySqlFile1.sqlとなります。
        SQLファイルはPHPファイルとしてrequireされるので、PHPで記述することができます。SQLクエリにオブジェクトを用いてバインド値を埋め込む場合、
                オブジェクトのプロパティやメソッドにアクセスする際は、アンダースコアで記述します。$conditionオブジェクトのidプロパティにアクセスする場合は、「:condition_id」
                となります。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao_findBySqlFile1.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from CD
/* <?php if (is_integer($condition->id)):?> */
    where id = /*:condition_id*/5
/* <?php endif?> */

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample4.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>conditionオブジェクトを作成</listitem>
        <listitem>findBySqlFile1メソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample4.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$condition = new StdClass;
$condition->id = 1;
$rows = $dao->findBySqlFile1($condition);
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>バインド値に配列を使用する</title>      
      <para>
        CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、CDテーブルからIDで検索したデータを取得するfindBySqlFile3メソッドを実装します。
                メソッドの戻り値として null を返します。PdoInterceptorはメソッドの戻り値が null の場合、SQLファイルからSQLクエリを取得します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findBySqlFile3($condition){}
}

]]></programlisting>      
      </blockquote>

      <para>
        findBySqlFile1メソッドが呼ばれた際に発行するSQLクエリをSQLファイルに記述します。SQLファイルはCdDaoクラスファイルと同じディレクトリに配置します。
        SQLファイル名は、クラス名_メソッド名.sqlとなります。CdDaoクラスのfindBySqlFile3メソッドの場合は、CdDao_findBySqlFile3.sqlとなります。
        SQLファイルはPHPファイルとしてrequireされるので、PHPで記述することができます。SQLクエリに配列を用いてバインド値を埋め込む場合、
                配列の値にアクセスする際は、アンダースコアで記述します。$condition配列のidキーにアクセスする場合は、「:condition_id」となります。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao_findBySqlFile3.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from CD
/* <?php if (is_integer($condition['id']):?> */
    where id = /*:condition_id*/5
/* <?php endif?> */

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample5.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>condition配列を作成</listitem>
        <listitem>findBySqlFile3メソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample5.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$condition = array('id' => 1);
$rows = $dao->findBySqlFile3($condition);
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>メソッドの戻り値でバインド値を設定する</title>      
      <para>
        CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、CDテーブルからタイトル名で検索するfindByTitleメソッドを実装します。
                メソッドの戻り値を配列とし、1番目の値にSQLクエリ、2番目の値にSQLクエリにバインドする値を配列で指定します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findByTitle() {
        return array("select * from CD where title = /*:title*/'AAA'", array('title' => 'S2Pdo!!!'));
    }
}

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample6.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>findByTitleメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample6.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$rows = $dao->findByTitle();
var_dump($rows);

]]></programlisting>      
      </blockquote>

    </sect2>

    <sbr/>
    <sect2><title>@S2Pdoアノテーションを使用する</title>      
      <para>
        @S2Pdoアノテーションは、クラスまたはメソッドに注釈します。次の2つを設定できます。
        <itemizedlist>
          <listitem>複数のデータソースを使用する場合に、どのPDOコンポーネントを使用するかを指定します。</listitem>
          <listitem>PdoInterceptor処理を実施するかどうかを指定します。(メソッドに注釈付けした場合)</listitem>
        </itemizedlist>
      </para>
      <para>
              書式は次のようになります。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @S2Pdo('pdo'       => PDOコンポーネント名,
 *        'available' => true)
 */
]]></programlisting>

      <para>
                例として、CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、sqlite_bデータベースの
        CDテーブルから全件を取得するfindAllFromBメソッドを実装します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    /**
     * @S2Pdo('pdo' => 'sqliteBPdo')
     */
    public function findAllFromB() {
        return "select * from CD";
    }
}

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample7.phpを作成します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにconfディレクトリ以下をimport (3つのPDOコンポーネントが読み込まれます)</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>findAllFromBメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample7.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config');

$dao = s2app::get('sample::pdo::CdDao');
$rows = $dao->findAllFromB();
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>DaoクラスでPDOを直接使用する</title>      
      <para>
      Daoクラスの中で直接PDOを使用する場合は、DaoクラスにPDOコンポーネントをインジェクションします。
            次の例では、CdDaoクラスにSqliteBPdoコンポーネントをインジェクションするpublicプロパティを用意しています。
            これにより、S2Containerの自動インジェクション機能によりPDOコンポーネントがCdDaoコンポーネントにインジェクションされます。
      transactionalInsertメソッドでは、インジェクションされたPDOコンポーネントを使用してトランザクションを開始しています。
      </para>

      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public $sqliteBPdo = 's2binding';

    /**
     * @S2Pdo('available' => false)
     */
    public function transactionalInsert() {
        try {
            $this->sqliteBPdo->beginTransaction();
            $this->insert(10, 'S2Pdo transaction', 'sample');
            $this->sqliteBPdo->commit();
        } catch (Exception $e) {
            seasar::log::S2Logger::getInstance(__NAMESPACE__)->warn($e->getMessage(), __METHOD__);
            $this->sqliteBPdo->rollBack();
        }
    }

    /**
     * @S2Pdo('pdo' => 'SqliteBPdo')
     */
    public function insert($id, $title, $content) {
        return "insert into CD values(/*:id*/5, /*:title*/'aaa', /*:content*/'bbb' )";
    }
}

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample8.phpを作成します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにconfディレクトリ以下をimport (3つのPDOコンポーネントが読み込まれます)</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>transactionalInsertメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample8.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config');

$dao = s2app::get('sample::pdo::CdDao');
$dao->transactionalInsert();

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>Paginateクラスでページング処理</title>      
      <para>
        Paginateクラスは、データベースからのデータ取得の際にページングを行うユーティリティクラスです。    
                 例として、EMPテーブルにアクセスするEmpDaoクラスを作成します。EmpDaoクラスには、次のようなfindByPaginateメソッドを実装します。
        PDOコンポーネントにはdb/sqlite_c.dbをデータソースとするsqliteCコンポーネントを用いています。
        sqliteCコンポーネントは、config/pdo.diconで設定されています。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/EmpDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
/**
 * @S2Pdo('pdo' => 'sqliteC')
 */
class EmpDao {

    /**
     * @S2Pdo('available' => false)
     */
    public function findByPaginate(::Paginate $paginate) {
        list($row) = $this->findAllTotal($paginate);
        $paginate->setTotal($row->total);
        return $this->findAll($paginate);
    }

    public function findAllTotal(::Paginate $paginate) {
        return "select count(*) as total from EMP";
    }

    public function findAll(::Paginate $paginate) {
        return "select * from EMP
                limit /*:paginate_getLimit*/3 offset /*:paginate_getOffset*/5";
    }
}

]]></programlisting>      
      </blockquote>
      <para>
        findByPaginateメソッドでは、まずfindAllTotalメソッドで全件数を取得し、paginateインスタンスに設定します。
        (Paginateクラスでページング処理を実施するために全件数が必要なため)
                その後、findAllメソッドを実行し、データを取得しています。findAllメソッドでは、limit/offset値にpaginateインスタンスが持つ
                情報を設定して、ページングを実施しています。
      </para>
      <para>
             次の処理を行うsample9.phpを作成します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>EmpDaoコンポーネントの取得</listitem>
        <listitem>Paginateインスタンスを生成し、1ページのアイテム数を設定</listitem>
        <listitem>findByPaginateメソッドを実行</listitem>
        <listitem>次のページに遷移</listitem>
        <listitem>findByPaginateメソッドを実行</listitem>
        <!-- 
        <listitem>Paginateクラスのfindメソッドでデータの取得</listitem>
         -->
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample9.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config');

$dao = s2app::get('sample::pdo::EmpDao');
$paginate = new Paginate;
$paginate->setLimit(5);
$rows = $dao->findByPaginate($paginate);
var_dump($rows);

$paginate->next();
$rows = $dao->findByPaginate($paginate);
var_dump($rows);

]]></programlisting>      
      </blockquote>

<!--
      <para>
        Paginateクラスのfindメソッドの定義は次になります。
      </para>
      <blockquote>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
final public function find($dao, $methodName, $totalMethodName = null);
]]></programlisting>      
        <itemizedlist>
          <listitem>第1引数 : Daoインスタンス</listitem>
          <listitem>第2引数 : データ取得メソッド名</listitem>
          <listitem>第3引数 : データ件数取得メソッド名</listitem>
        </itemizedlist>
      </blockquote>
      <para>
              第3引数が省略された場合は、第2引数の値に "Total" を追記した文字列をメソッド名とします。上記例の場合は、
              データ取得メソッド名が "findAll" なので、 データ件数取得メソッド名は "findAllTotal" となります。
      </para>
  -->     
   
    <sbr/>
      <sect3><title>Paginate API リファレンス</title>
        <blockquote>

        <formalpara><title>Paginate::getTotalPage メソッド</title></formalpara>
        <para>
                  全件数を件数/ページ(limit)で割った全ページ数を返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getTotalPage();
]]></programlisting>

        <formalpara><title>Paginate::getPage メソッド</title></formalpara>
        <para>
                  現在のページ番号を返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getPage();
]]></programlisting>

        <formalpara><title>Paginate::setPage メソッド</title></formalpara>
        <para>
                  ページ番号を設定します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $page
     * @throw Exception
     */
    final public function setPage($page);
]]></programlisting>

        <formalpara><title>Paginate::getOffset メソッド</title></formalpara>
        <para>
                  現在のoffset位置を返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     */
    final public function getOffset();
]]></programlisting>

        <formalpara><title>Paginate::setLimit メソッド</title></formalpara>
        <para>
         1ページあたりの件数を設定します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @prama integer $limit
     */
    final public function setLimit($limit);
]]></programlisting>

        <formalpara><title>Paginate::getTotal メソッド</title></formalpara>
        <para>
                  全件数を返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return integer
     * @throw Exception 全件数が未設定の場合にスローされます。
     */
    final public function getTotal();
]]></programlisting>

        <formalpara><title>Paginate::setTotal メソッド</title></formalpara>
        <para>
                  全件数を設定します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $total
     */
    final public function setTotal($total);
]]></programlisting>

        <formalpara><title>Paginate::setWindow メソッド</title></formalpara>
        <para>
                  ページウィンドウに表示するページ数を設定します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @param integer $window
     */
    final public function setWindow($window);
]]></programlisting>

        <formalpara><title>Paginate::next メソッド</title></formalpara>
        <para>
          1ページ進めます。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    final public function next();
]]></programlisting>

        <formalpara><title>Paginate::isNext メソッド</title></formalpara>
        <para>
                  次のページがあるかどうかを返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return boolean
     */
    final public function isNext();
]]></programlisting>

        <formalpara><title>Paginate::prev メソッド</title></formalpara>
        <para>
          1ページ戻ります。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    final public function prev();
]]></programlisting>

        <formalpara><title>Paginate::isPrev メソッド</title></formalpara>
        <para>
                  前のページがあるかどうかを返します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return boolean
     */
    final public function isPrev();
]]></programlisting>

        <formalpara><title>Paginate::pages メソッド</title></formalpara>
        <para>
         window内に収まるページ番号を列挙します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
    /**
     * @return array
     */
    final public function pages() {
]]></programlisting>

        </blockquote>
      </sect3>
    </sect2>    
  </sect1>
