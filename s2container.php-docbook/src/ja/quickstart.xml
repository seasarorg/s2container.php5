<chapter id="quickstart"><title>クイックスタート</title>

  <!-- ################################################################### -->
  <sect1 id="setup"><title>セットアップ</title>
    <para>はじめに<link linkend="install">インストールドキュメント</link>にしたがって S2Container.PHP をインストールして下さい。</para>
  </sect1>

  <!-- ################################################################### -->
  <sect1 id="quick010"><title>コンポーネントの登録と取得</title>
    <para>
        コンポーネントの登録は<link linkend="dicon.application.register">s2component関数</link>で行います。s2component関数は、S2ApplicationContextクラスのregisterメソッドを
        用いてコンポーネントを登録します。登録したコンポーネントはS2ApplicationContextクラスのgetメソッドで取得できます。
    </para>
    <itemizedlist><listitem>quickstart010.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

class Action {}
s2component('Action');

$action = s2app::get('Action');
var_dump($action);
]]></programlisting>

    <para>コンポーネント名を指定して登録する場合は、s2component関数の戻り値であるComponentInfoDefインスタンスで指定します。</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

class Action {}
s2component('Action')->setName('act');

$action = s2app::get('act');
var_dump($action);
]]></programlisting>

    <note><title>NOTE</title>
      <para>このExampleは examples/quickstart/quickstart010.php にあります。</para>
    </note>
  </sect1>


  <!-- ################################################################### -->
  <sect1 id="quick020"><title>Dependency Injection</title>
    <para>
        次に、ActionコンポーネントにServiceコンポーネントをInjectしてみます。
    </para>

    <para>
        次のようなActionクラスをclassesディレクトリに作成します。<link linkend="dicon.application.annotation.s2component">@S2Componentアノテーション</link>でコンポーネント名を指定することができます。
        また、Serviceクラスのインスタンスを受け取る$serviceプロパティを実装します。アクセス修飾子をpublicとするこで、<link linkend="dicon.di.auto.property">プロパティインジェクション</link>により
    ServiceコンポーネントがInjectされます。indexActionメソッドでは、InjectされたServiceコンポーネントを使用して処理を行います。
    </para>
    <itemizedlist><listitem>classes/Action.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
/**
 * @S2Component('name' => 'act')
 */
class Action{
    public $service = null;
    public function indexAction() {
        $result = $this->service->add(1, 2);
    }
}
]]></programlisting>

    <para>
        次のようなServiceクラスを作成します。
    </para>
    <itemizedlist><listitem>classes/Service.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class Service {
    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>

    <para>
    ActionクラスやServiceクラスの読み込みは<link linkend="dicon.application.import">S2ApplicationContextクラスのimportメソッド</link>で行います。
    S2ApplicationContext::getメソッドでActionコンポーネントを取得すると、$serviceプロパティには、ServiceクラスのインスタンスがInjectされています。
    </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

s2app::import(dirname(__FILE__) . '/classes');
$action = s2app::get('act');
var_dump($action);

]]></programlisting>

    <note><title>NOTE</title>
      <para>このExampleは examples/quickstart/quickstart020.php にあります。</para>
    </note>
  </sect1>


  <!-- ################################################################### -->
  <sect1 id="quick030"><title>Aspectの自動登録</title>
    <para>
    Aspectの登録は<link linkend="dicon.application.autoaspect">s2aspect関数</link>で行います。
        次の例では、ServiceクラスのaddメソッドにTraceInterceptorをAspectしています。
    S2ApplicationContext::getメソッドでActionコンポーネントを取得し、indexActionメソッドを実行すると、Serviceクラスの
    addメソッドが実行された際のトレースログが出力されます。
    </para>
    <itemizedlist><listitem>quickstart030.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

s2app::import(dirname(__FILE__) . '/classes');
s2aspect('new seasar\aop\interceptor\TraceInterceptor')
  ->setPattern('/^Service$/')
  ->setPointcut('/^add$/');

$action = s2app::get('Action');
$action->indexAction();
]]></programlisting>

    <note><title>NOTE</title>
      <para>このExampleは examples/quickstart/quickstart030.php にあります。</para>
    </note>
  </sect1>

  <!-- ################################################################### -->
  <sect1 id="quick040"><title>Aspect Anotation</title>
    <para>
    Aspectの登録は<link linkend="dicon.application.annotation.aspect">@S2Aspect アノテーション</link>でも設定することができます。
        次の例では、DaoクラスのfindByIdメソッドにTraceInterceptorをAspectしています。
    </para>
    <itemizedlist><listitem>classes/Dao.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class Dao {
    /**
     * S2Aspect('new seasar\aop\interceptor\TraceInterceptor')
     */
    public function findById($id) {
        return 2009;
    }
}
]]></programlisting>

    <para>
         次のような、Actionクラスを作成します。Daoコンポーネントを受け取るsetDaoセッターメソッドを実装します。
    ActionクラスのgetByIdメソッドでは、DaoクラスのfindByIdメソッドを用いて処理を実行します。
    </para>

    <itemizedlist><listitem>classes/Action.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
/**
 * @S2Component('name' => 'act')
 */
class Action{
    private $dao = null;
    public function setDao(Dao $dao) {
        $this->dao = $dao;
    }
    public function getById() {
        return $this->dao->findById(10);
    }
}
]]></programlisting>

    <para>
    S2ApplicationContext::getメソッドでActionコンポーネントを取得し、getByIdメソッドを実行すると、Daoクラスの
    findByIdメソッドが実行された際のトレースログが出力されます。
    </para>
    <itemizedlist><listitem>quickstart030.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

s2app::import(dirname(__FILE__) . '/classes');
$action = s2app::get('Action');
$action->getById();
]]></programlisting>

    <note><title>NOTE</title>
      <para>このExampleは examples/quickstart/quickstart040.php にあります。</para>
    </note>
  </sect1>  


  <!-- ################################################################### -->
  <sect1 id="quick050"><title>ダイコンファイルを使用する</title>
    <para>これまでの例をダイコンファイルで定義してみます。</para>
    <itemizedlist><listitem>quickstart050.dicon</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR//DTD S2Container//EN" "components21.dtd">
<components>
    <component class="Action"/>
    <component class="Service">
        <aspect pointcut="/^add$/">trace</aspect>
    </component>
    <component class="Dao">
        <aspect pointcut="/^findById$/">trace</aspect>
    </component>
    <component class="seasar\aop\interceptor\TraceInterceptor" name="trace"/>
</components>
]]></programlisting>

    <para>ダイコンファイルの読み込みは、S2ApplicationContextクラスのimportメソッドで行います。
       classesディレクトリのクラスの読み込みは、<link linkend="misc.classloader">seasar\util\ClassLoaderクラス</link>のimportメソッドで行います。
    </para>
    <itemizedlist><listitem>quickstart050.php</listitem></itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;
use seasar\util\ClassLoader as s2loader;

s2loader::import(dirname(__FILE__) . '/classes');
s2app::import(dirname(__FILE__) . '/quickstart050.dicon');

$action = s2app::get('Action');
$action->indexAction();
]]></programlisting>


    <note><title>NOTE</title>
      <para>このExampleは examples/quickstart050.php</para>
    </note>
  </sect1>


</chapter>
