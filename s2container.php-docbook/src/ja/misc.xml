<chapter id="misc"><title>MISC</title>
  <sect1 id="misc.spec"><title>S2Container-1.2とS2Container-2.0 機能比較</title>
    <blockquote>
      <table frame='all'><title>S2Container-1.2とS2Container-2.0 機能比較表</title>
        <tgroup cols='3' align='left' colsep='1' rowsep='1'>
          <colspec colwidth="2*" align="center" nowrap="1"/>
          <colspec colwidth="4*"/>
          <colspec colwidth="4*"/>
          <thead>
            <row>
              <entry align="center">機能</entry>
              <entry align="center">S2Container-1.2</entry>
              <entry align="center">S2Container-2.0</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>プロパティ・インジェクション</entry>
              <entry>無し</entry>
              <entry><link linkend="dicon.di.auto.property">有り</link></entry>
            </row>
            <row>
              <entry>セッターメソッド・インジェクション</entry>
              <entry>有り</entry>
              <entry><link linkend="dicon.di.auto.setter">有り</link></entry>
            </row>
            <row>
              <entry>コンストラクタ・インジェクション</entry>
              <entry>有り</entry>
              <entry><link linkend="dicon.di.auto.constructor">有り</link></entry>
            </row>
            <row>
              <entry>メソッド・インジェクション</entry>
              <entry>InitMethod、DestroyMethod</entry>
              <entry><link linkend="dicon.di.manual.initmethod">InitMethod</link></entry>
            </row>
            <row>
              <entry>インスタンスタイプ</entry>
              <entry>singleton、prototype、outer、request、session</entry>
              <entry><link linkend="dicon.instance">singleton、prototype</link></entry>
            </row>
            <row>
              <entry>バインディングタイプ</entry>
              <entry>auto、constructor、property、none</entry>
              <entry><link linkend="dicon.binding">auto、none</link></entry>
            </row>
            <row>
              <entry>アノテーション</entry>
              <entry>拡張機能(extension)でのAnnotation関連、S2ContainerApplicationContextクラスのアノテーション機能</entry>
              <entry><link linkend="misc.annotation">seasar\util\Annotationクラスに統合</link></entry>
            </row>
            <row>
              <entry>バンドル Interceptor</entry>
              <entry>
                S2Container_TraceInterceptor <sbr/>
                S2Container_MockInterceptor <sbr/>
                S2Container_DelegateInterceptor <sbr/>
                S2Container_PrototypeDelegateInterceptor <sbr/>
                S2Container_ThrowsInterceptor <sbr/>
                S2Container_TraceThrowsInterceptor <sbr/>
                S2Container_InterceptorChain
              </entry>
              <entry>
                seasar\aop\interceptor\TraceInterceptor <sbr/>
                seasar\aop\interceptor\MockInterceptor <sbr/>
                seasar\aop\interceptor\InterceptorChain
              </entry>
            </row>
            <row>
              <entry>デフォルト Pointcut</entry>
              <entry>実装している Interface の すべての public メソッド。 Interface を実装していない場合は無し。</entry>
              <entry>
                                実装している Interface の すべての public メソッド。
                Interface を実装していない場合は、そのクラスが実装しているすべての public メソッド。
                                ただし、set、get、is で名前が始まるメソッドは除外される。
              </entry>
            </row>
            <row>
              <entry>Pointcut の指定</entry>
              <entry>
                              カンマ区切りで複数指定可 (例 .+Dao,.+Service)
              </entry>
              <entry>
                              単一指定 (例 /.+Dao$/ )
              </entry>
            </row>
            <row>
              <entry>ClassLoader</entry>
              <entry>S2ContainerClassLoader、S2ContainerApplicationContext クラス</entry>
              <entry><link linkend="misc.classloader">seasar\util\ClassLoader クラス</link></entry>
            </row>
            <row>
              <entry>Singleton S2Container 機能</entry>
              <entry>S2Container_SingletonS2containerFactory クラス</entry>
              <entry><link linkend="dicon.application.singleton">S2ApplicationContext クラスの Singleton S2Cotainer 機能</link></entry>
            </row>
            <row>
              <entry>ログ機能</entry>
              <entry>有り</entry>
              <entry><link linkend="misc.s2log">有り</link></entry>
            </row>
            <row>
              <entry>S2Container キャッシュ機能</entry>
              <entry>有り</entry>
              <entry>無し</entry>
            </row>
            <row>
              <entry>S2AOP キャッシュ機能</entry>
              <entry>有り</entry>
              <entry><link linkend="aop.config.caching">有り</link></entry>
            </row>
            <row>
              <entry>コンポーネント自動登録機能</entry>
              <entry>拡張機能(extension)のコンポーネント自動登録機能と S2ContainerApplicationContextのimport機能</entry>
              <entry><link linkend="dicon.application.import">S2ApplicationContext クラスのimport機能に統合</link></entry>
            </row>
            <row>
              <entry>Aspect 自動登録機能</entry>
              <entry>拡張機能(extension)のAspect 自動登録機能と S2ContainerApplicationContextのregisterAspect機能</entry>
              <entry><link linkend="dicon.application.autoaspect">S2ApplicationContext クラスのregisterAspect機能に統合</link></entry>
            </row>
            <row>
              <entry>コンポーネントの登録名</entry>
              <entry>コンポーネント名、クラス名</entry>
              <entry><link linkend="dicon.s2container.component">コンポーネント名、namespace付きクラス名、クラス名、先頭が小文字のクラス名</link></entry>
            </row>
            <row>
              <entry>環境指定</entry>
              <entry>有り</entry>
              <entry>無し</entry>
            </row>
            <row>
              <entry>S2ApplicationContext::registerAspect メソッド引数</entry>
              <entry>
                <itemizedlist>
                  <listitem>第1引数 : コンポーネントパターン</listitem>
                  <listitem>第2引数 : Interceptor</listitem>
                  <listitem>第3引数 : Pointcut</listitem>
                </itemizedlist>              
              </entry>
              <entry>
                <itemizedlist>
                  <listitem>第1引数 : Interceptor</listitem>
                  <listitem>第2引数 : コンポーネントパターン (optional)</listitem>
                  <listitem>第3引数 : Pointcut (optional)</listitem>
                </itemizedlist>
                                また、戻り値としてAspectInfoDefインスタンスが返ります。              
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </blockquote>
  </sect1>

  <sect1 id="misc201"><title>コンポーネントでS2Containerを使用する</title>
    <para>
        コンポーネントが自分自身が登録されているS2Containerに依存している場合は、プロパティインジェクションやセッターインジェクションで
    S2Containerインスタンスを取得することができます。S2Containerのコンポーネント名は「container」です。
    <sbr/>
        例として、次のようなサービスクラスを作成します。自動バインディングによりプロパティインジェクションによってS2ContainerインスタンスがDIされます。
   
    </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service {
    public $container = null;
    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>

    <para>
        実行スクリプトは次のように作成します。
    </para>  

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');

use seasar\container\S2ApplicationContext as s2app;
s2app::import(dirname(__FILE__) . '/classes');
$service = s2app::get('Service');

print get_class($service->container) . PHP_EOL;

]]></programlisting>
    <note><title>NOTE</title>
      <para>このExampleは examples/misc/s2container にあります。</para>
    </note>

  </sect1>



  <!-- ##################################################################### -->
  <sect1 id="misc.s2log"><title>S2Containerのログ設定</title>
    <para>
    S2Containerでは、次のようにS2LoggerのgetLoggerメソッドでLoggerインスタンスを取得し、ログ出力を行います。
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');

seasar\log\S2Logger::getLogger()->debug('debug message.');
]]></programlisting>

    <sect2><title>S2Logger</title>
      <para>
      S2Containerでは、ログ出力を行う Loggerインスタンスを seasar\log\S2Logger クラスを介して取得します。
      S2Logger::getLogger メソッドは、デフォルトでは SimpleLogger のインスタンスを返します。
      Loggerクラスを生成するLoggerFactoryや、ログ出力のレベル設定等は、seasar\Configクラスのプロパティとして設定します。
      </para>

      <blockquote>
        <formalpara><title>LOGGER_FACTORY</title></formalpara>
        <para>
                使用するLoggerを生成するLoggerFactoryクラスを指定します。
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar\Config::$LOGGER_FACTORY = 'seasar\log\impl\SimpleLoggerFactory';
]]></programlisting>

        <formalpara><title>LOG_LEVEL</title></formalpara>
        <para>
                ログ出力のレベルを設定します。
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar\Config::$LOG_LEVEL = seasar\log\impl\SimpleLogger::DEBUG;
]]></programlisting>

        <formalpara><title>DEBUG_EVAL</title></formalpara>
        <para>
                ログ出力レベルがDEBUG設定の場合に、eval関数で処理されるExpressionをログ出力します。
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar\Config::$DEBUG_EVAL = false;
]]></programlisting>

        <formalpara><title>DEBUG_VERBOSE</title></formalpara>
        <para>
                ログ出力レベルがDEBUG設定の場合に、詳細な情報をログ出力します。
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar\Config::$DEBUG_VERBOSE = false;
]]></programlisting>

      </blockquote>
    </sect2>

    <sect2><title>SimpleLogger</title>
      <para>
      SimpleLogger はデフォルトで標準出力にログを表示します。ログレベルは DEBUG、NOTICE、INFO、WARN、ERROR、FATAL の 6 つです。
      </para>

      <blockquote>
        <formalpara><title>LOGGER_FACTORY</title></formalpara>
        <para>
        SimpleLoggerのLoggerFactoryはSimpleLoggerFactoryです。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar\Config::$LOGGER_FACTORY = 'seasar\log\impl\SimpleLoggerFactory';
]]></programlisting>

        <formalpara><title>LOG_LEVEL</title></formalpara>
        <para>
                ログ出力のレベルを設定します。DEBUG、NOTICE、INFO、WARN、ERROR、FATALの6つを指定できます。
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar\Config::$LOG_LEVEL = seasar\log\impl\SimpleLogger::DEBUG;
seasar\Config::$LOG_LEVEL = seasar\log\impl\SimpleLogger::NOTICE;
seasar\Config::$LOG_LEVEL = seasar\log\impl\SimpleLogger::INFO;
seasar\Config::$LOG_LEVEL = seasar\log\impl\SimpleLogger::WARN;
seasar\Config::$LOG_LEVEL = seasar\log\impl\SimpleLogger::ERROR;
seasar\Config::$LOG_LEVEL = seasar\log\impl\SimpleLogger::FATAL;
]]></programlisting>

        <formalpara><title>SIMPLE_LOG_FILE</title></formalpara>
        <para>
                ログ出力をファイルに行う場合のログファイルを設定します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar\Config::$SIMPLE_LOG_FILE = null;
]]></programlisting>
      </blockquote>
    </sect2>
  </sect1>

  <!-- ##################################################################### -->
  <sect1 id="misc.annotation"><title>Annotation API リファレンス</title>
    <para>   
    seasar\util\Annotation は、クラスに記述されたコメントや定数値をアノテーションとして読み込みます。
        読み込んだ文字列は配列のExpressionとしてeval関数で処理します。
    <sbr/>
       例として、次のようなアノテーションが記述されたサービスクラスを作成します。
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @Sample('name' => 'seasar')
 */
class Service {
    const SAMPLE = '"name" => "seasar.php"';
}
]]></programlisting>

    <para>
       アノテーションを取得する実行スクリプトは次のようになります。
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;
s2app::import(dirname(__FILE__) . '/classes');

$service = new \ReflectionClass('Service');

$annotation = \seasar\util\Annotation::get($service, '@Sample');
print_r($annotation);

$annotation = \seasar\util\Annotation::get($service, 'SAMPLE');
print_r($annotation);

]]></programlisting>

    <para>
       上記スクリプトを実行すると、コメントアノテーションと定数アノテーションで記述した値を配列値として取得できます。
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% php example.php
Array
(
    [name] => seasar
)
Array
(
    [name] => seasar.php
)
%
]]></programlisting>
    <note><title>NOTE</title>
      <para>このExampleは examples/misc/annotation にあります。</para>
    </note>

    <sbr/>
    <blockquote>
      <formalpara><title>COMMENT設定</title></formalpara>
      <para>
            コメントアノテーションを読み込む設定とします。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar\util\Annotation::$COMMENT = true;
]]></programlisting>

      <formalpara><title>CONSTANT設定</title></formalpara>
      <para>
            定数アノテーションを読み込む設定とします。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar\util\Annotation::$CONSTANT = true;
]]></programlisting>

      <formalpara><title>Annotation::get メソッド</title></formalpara>
      <para>
            アノテーションを取得します。第1引数には、ReflectionClass、ReflectionMethod、ReflectionPropertyを指定します。
            クラスアノテーションまたは定数アノテーションを取得する場合はReflectionClassを渡します。メソッドアノテーションを取得する場合は
      ReflectionMethod、プロパティアノテーションを取得する場合はReflectionPropertyを渡します。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @param ReflectionClass|ReflectionMethod|ReflectionProperty $reflection
 * @param string $annotation
 * @return array
 * @throw seasar\exception\AnnotationNotFoundException
 */
publi static function get($reflection, $annotation)
]]></programlisting>

      <formalpara><title>Annotation::has メソッド</title></formalpara>
      <para>
            アノテーションが記述されているかを取得します。第1引数には、ReflectionClass、ReflectionMethod、ReflectionPropertyを指定します。
            クラスアノテーションまたは定数アノテーションを調べる場合はReflectionClassを渡します。メソッドアノテーションを調べる場合は
      ReflectionMethod、プロパティアノテーションを調べる場合はReflectionPropertyを渡します。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @param ReflectionClass|ReflectionMethod|ReflectionProperty $reflection
 * @param string $annotation
 * @return boolean
 */
publi static function has($reflection, $annotation)
]]></programlisting>

    </blockquote>
  </sect1>


  <!-- ##################################################################### -->
  <sect1 id="misc.classloader"><title>ClassLoader API リファレンス</title>
     <para>
       seasar\util\ClassLoaderクラスは、ファイルシステム上のクラスファイルを検索し、autoload関数を介して
              クラス定義をロードします。クラスのインポートは次のメソッドで行います。
     </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar\util\ClassLoader::import($path, $namespace = array(), $strict = false, $pear = false, $recursive = true)
]]></programlisting>
    <blockquote>
      <itemizedlist>
        <listitem>第1引数 : 検索するディレクトリへのパス</listitem>
        <listitem>第2引数 : namespace文字列または配列</listitem>
        <listitem>第3引数 : trueの場合、$namespaceで指定されたネームスペースが使用されます。falseの場合は、検索したサブディレクトリが$namespaceに順次追加されます。</listitem>
        <listitem>第4引数 : trueの場合は、$namespaceが「_」で展開されます。falseの場合は、$namespaceが「\」で展開されます</listitem>
        <listitem>第5引数 : trueの場合は、再帰的にディレクトリを検索します。falseの場合は、サブディレクトリを検索しません。</listitem>
      </itemizedlist>
    </blockquote>

     <para>
                第1引数で指定したディレクトリにあるクラスファイル( .php、.class.php など)をインポートします。
              インポートではクラス名とクラスファイルのパスを取得します。この情報は autoload 関数でクラス定義が require される際に使用されます。
              クラス名はクラスファイル名の拡張子を除く部分になります。クラスファイル名が S2Container.php や S2Container.class.php の場合、
              「 S2Container 」がクラス名になります。
     </para>
     <para>
             第2引数でnamespaceを文字列で指定する場合は、「example\logic」などのように指定します。
             配列で指定する場合は、array('example','logic')のようになります。
     </para>
  </sect1>

  <!-- ##################################################################### -->
  <sect1 id="misc.pdo"><title>PDOを用いたデータベースアクセス</title>
    <sect2><title>PDOを継承するクラスを使用する</title>
        <para>
        PDOクラスを継承する任意のクラスを作成します。クラスのコンストラクタでデータソースを設定します。
        </para>
        <para>例として、次のようなSqlitePdoクラスを  /path/to/classes/SqlitePdo.php に作成します。</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class SqlitePdo extends \PDO {
    public function __construct() {
        parent::__construct('sqlite:' . DB_DIR . '/sqlite.db');
        $this->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }
}
]]></programlisting>

        <para>作成したPDOクラスを使用するCdDaoを  /path/to/classes/CdDao.php に作成します。</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class CdDao {
    public $sqlitePdo = null;
    public function findAll() {
        $stmt = $this->sqlitePdo->prepare('select * from CD');
        $stmt->setFetchMode(PDO::FETCH_OBJ);
        $stmt->execute();
        return $stmt->fetchAll();
    }
}
]]></programlisting>

        <para>PDOクラスやCdDaoクラスをS2ApplicationContextでimportします。</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
define('DB_DIR', dirname(__FILE__) . '/db');
use seasar\container\S2ApplicationContext as s2app;

s2app::import(dirname(__FILE__) . '/classes');
$cdDao = s2app::get('CdDao');
var_dump($cdDao->findAll());

]]></programlisting>
    </sect2>

    <sbr/>
    <sect2><title>DICONファイルでPDOを設定する</title>
        <para>
        DICONファイルでPDOの設定を行います。例として、次のようなDICONファイルを /path/to/dicons/pdo.dicon として作成します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR2.1//DTD S2Container//EN"
"http://www.seasar.org/dtd/components21.dtd">
<components>
   <component name="sqlitePdo" class="PDO">
       <arg>return 'sqlite:' . DB_DIR . '/sqlite.db'</arg>
   </component>
</components>

]]></programlisting>

        <para>作成したDICONファイルやCdDaoクラスをS2ApplicationContextでimportします。</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar\container\S2ApplicationContext as s2app;

use seasar\container\S2ApplicationContext as s2app;

s2app::import(dirname(__FILE__) . '/classes/CdDao.php');
s2app::import(dirname(__FILE__) . '/dicon');
$cdDao = s2app::get('CdDao');
var_dump($cdDao->findAll());

]]></programlisting>

    <note><title>NOTE</title>
      <para>このExampleは examples/misc/datasource にあります。</para>
    </note>
    </sect2>
  </sect1>



  &misc.pdointerceptor;
  &misc.strictinterceptor;
  &misc.zend;
  &misc.s2erd;
  &misc.symfony;
</chapter>
