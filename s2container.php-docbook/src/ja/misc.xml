<chapter id="misc"><title>MISC</title>
  <sect1 id="misc.spec"><title>S2Container-1.2 と S2Container-2.0 機能比較</title>
    <blockquote>
      <table frame='all'><title>S2Container-1.2 と S2Container-2.0 機能比較表</title>
        <tgroup cols='3' align='left' colsep='1' rowsep='1'>
          <colspec colwidth="150" align="center" nowrap="1"/>
          <colspec colwidth="300"/>
          <colspec colwidth="300"/>
          <thead>
            <row>
              <entry align="center">機能</entry>
              <entry align="center">S2Container-1.2</entry>
              <entry align="center">S2Container-2.0</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>プロパティ・インジェクション</entry>
              <entry>無し</entry>
              <entry><link linkend="dicon.di.auto.property">有り</link></entry>
            </row>
            <row>
              <entry>セッターメソッド・インジェクション</entry>
              <entry>有り</entry>
              <entry><link linkend="dicon.di.auto.setter">有り</link></entry>
            </row>
            <row>
              <entry>コンストラクタ・インジェクション</entry>
              <entry>有り</entry>
              <entry><link linkend="dicon.di.auto.constructor">有り</link></entry>
            </row>
            <row>
              <entry>メソッド・インジェクション</entry>
              <entry>InitMethod、DestroyMethod</entry>
              <entry><link linkend="dicon.di.manual.initmethod">InitMethod</link></entry>
            </row>
            <row>
              <entry>インスタンスタイプ</entry>
              <entry>singleton、prototype、outer、request、session</entry>
              <entry><link linkend="dicon.instance">singleton、prototype</link></entry>
            </row>
            <row>
              <entry>バインディングタイプ</entry>
              <entry>auto、constructor、property、none</entry>
              <entry><link linkend="dicon.binding">auto、none</link></entry>
            </row>
            <row>
              <entry>アノテーション</entry>
              <entry>拡張機能(extension)でのAnnotation関連、S2ContainerApplicationContextクラスのアノテーション機能</entry>
              <entry><link linkend="misc.annotation">seasar::util:Annotationクラスに統合</link></entry>
            </row>
            <row>
              <entry>バンドル Interceptor</entry>
              <entry>
                S2Container_TraceInterceptor <sbr/>
                S2Container_MockInterceptor <sbr/>
                S2Container_DelegateInterceptor <sbr/>
                S2Container_PrototypeDelegateInterceptor <sbr/>
                S2Container_ThrowsInterceptor <sbr/>
                S2Container_TraceThrowsInterceptor <sbr/>
                S2Container_InterceptorChain
              </entry>
              <entry>
                seasar::aop::interceptor::TraceInterceptor <sbr/>
                seasar::aop::interceptor::MockInterceptor <sbr/>
                seasar::aop::interceptor::InterceptorChain
              </entry>
            </row>
            <row>
              <entry>デフォルト Pointcut</entry>
              <entry>実装している Interface の すべての public メソッド。 Interface を実装していない場合は無し。</entry>
              <entry>
                                実装している Interface の すべての public メソッド。
                Interface を実装していない場合は、そのクラスが実装しているすべての public メソッド。
                                ただし、set、get、is で名前が始まるメソッドは除外される。
              </entry>
            </row>
            <row>
              <entry>ClassLoader</entry>
              <entry>S2ContainerClassLoader、S2ContainerApplicationContext クラス</entry>
              <entry><link linkend="misc.classloader">seasar::util::ClassLoader クラス</link></entry>
            </row>
            <row>
              <entry>Singleton S2Container 機能</entry>
              <entry>S2Container_SingletonS2containerFactory クラス</entry>
              <entry><link linkend="dicon.application.singleton">S2ApplicationContext クラスの Singleton S2Cotainer 機能</link></entry>
            </row>
            <row>
              <entry>ログ機能</entry>
              <entry>有り</entry>
              <entry><link linkend="misc.s2log">有り</link></entry>
            </row>
            <row>
              <entry>S2Container キャッシュ機能</entry>
              <entry>有り</entry>
              <entry>無し</entry>
            </row>
            <row>
              <entry>S2AOP キャッシュ機能</entry>
              <entry>有り</entry>
              <entry><link linkend="aop.config.caching">有り</link></entry>
            </row>
            <row>
              <entry>コンポーネント自動登録機能</entry>
              <entry>拡張機能(extension)のコンポーネント自動登録機能と S2ContainerApplicationContextのimport機能</entry>
              <entry><link linkend="dicon.application.import">S2ApplicationContext クラスのimport機能に統合</link></entry>
            </row>
            <row>
              <entry>Aspect 自動登録機能</entry>
              <entry>拡張機能(extension)のAspect 自動登録機能と S2ContainerApplicationContextのregisterAspect機能</entry>
              <entry><link linkend="dicon.application.autoaspect">S2ApplicationContext クラスのregisterAspect機能に統合</link></entry>
            </row>
            <row>
              <entry>コンポーネントの登録名</entry>
              <entry>コンポーネント名、クラス名</entry>
              <entry><link linkend="dicon.s2container.component">コンポーネント名、namespace付きクラス名、クラス名、先頭が小文字のクラス名</link></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </blockquote>
  </sect1>

  <sect1 id="misc201"><title>コンポーネントでS2Containerを使用する</title>
    <para>
        コンポーネントが自分自身が登録されているS2Containerに依存している場合は、プロパティインジェクションやセッターインジェクションで
    S2containerインスタンスを取得することができます。S2Containerのコンポーネント名は「container」です。
    <sbr/>
        例として、次のようなサービスクラスを作成します。自動バインディングによりプロパティインジェクションによってS2ContainerインスタンスがDIされます。
   
    </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
class Service {
    public $container = 'S2Binding container';
    //public $container = 'S2Binding seasar::container::S2Container';

    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>

    <para>
        実行スクリプトは次のように作成します。
    </para>  

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');

seasar::container::S2ApplicationContext::import(dirname(__FILE__) . '/classes');
$container = seasar::container::S2ApplicationContext::create();
$service   = $container->getComponent('Service');

print get_class($service->container) . PHP_EOL;

]]></programlisting>
    <note><title>NOTE</title>
      <para>このExampleは examples/misc/s2container にあります。</para>
    </note>

  </sect1>



  <!-- ##################################################################### -->
  <sect1 id="misc.s2log"><title>S2Containerのログ設定</title>
    <para>
    S2Containerでは、次のようにS2LoggerのgetLoggerメソッドでLoggerインスタンスを取得し、ログ出力を行います。
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');

seasar::log::S2Logger::getLogger()->debug('debug message.');
]]></programlisting>

    <sect2><title>S2Logger</title>
      <para>
      S2Containerでは、ログ出力を行う Loggerインスタンスを seasar::log::S2Logger クラスを介して取得します。
      S2Logger::getLogger メソッドは、デフォルトでは SimpleLogger のインスタンスを返します。
      Loggerクラスを生成するLoggerFactoryや、ログ出力のレベル設定等は、seasar::Configクラスのプロパティとして設定します。
      </para>

      <blockquote>
        <formalpara><title>LOGGER_FACTORY</title></formalpara>
        <para>
                使用するLoggerを生成するLoggerFactoryクラスを指定します。
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$LOGGER_FACTORY = 'seasar::log::impl::SimpleLoggerFactory';
]]></programlisting>

        <formalpara><title>LOG_LEVEL</title></formalpara>
        <para>
                ログ出力のレベルを設定します。
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::DEBUG;
]]></programlisting>

        <formalpara><title>DEBUG_EVAL</title></formalpara>
        <para>
                ログ出力レベルがDEBUG設定の場合に、eval関数で処理されるExpressionをログ出力します。
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$DEBUG_EVAL = false;
]]></programlisting>
      </blockquote>
    </sect2>

    <sect2><title>SimpleLogger</title>
      <para>
      SimpleLogger はデフォルトで標準出力にログを表示します。ログレベルは DEBUG、NOTICE、INFO、WARN、ERROR、FATAL の 6 つです。
      </para>

      <blockquote>
        <formalpara><title>LOGGER_FACTORY</title></formalpara>
        <para>
        SimpleLoggerのLoggerFactoryはSimpleLoggerFactoryです。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$LOGGER_FACTORY = 'seasar::log::impl::SimpleLoggerFactory';
]]></programlisting>

        <formalpara><title>LOG_LEVEL</title></formalpara>
        <para>
                ログ出力のレベルを設定します。DEBUG、NOTICE、INFO、WARN、ERROR、FATALの6つを指定できます。
        </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::DEBUG;
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::NOTICE;
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::INFO;
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::WARN;
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::ERROR;
seasar::Config::$LOG_LEVEL = seasar::log::impl::SimpleLogger::FATAL;
]]></programlisting>

        <formalpara><title>SIMPLE_LOG_FILE</title></formalpara>
        <para>
                ログ出力をファイルに行う場合のログファイルを設定します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::Config::$SIMPLE_LOG_FILE = null;
]]></programlisting>
      </blockquote>
    </sect2>
  </sect1>

  <!-- ##################################################################### -->
  <sect1 id="misc.annotation"><title>Annotation API リファレンス</title>
    <para>   
    seasar::util::Annotation は、クラスに記述されたコメントや定数値をアノテーションとして読み込みます。
        読み込んだ文字列は配列のExpressionとしてeval関数で処理します。
    <sbr/>
       例として、次のようなアノテーションが記述されたサービスクラスを作成します。
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @Sample('name' => 'seasar')
 */
class Service {
    const SAMPLE = '"name" => "seasar.php"';
}
]]></programlisting>

    <para>
       アノテーションを取得する実行スクリプトは次のようになります。
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');
seasar::util::ClassLoader::import(dirname(__FILE__) . '/classes');
seasar::util::Annotation::$CONSTANT = true;

$service = new ReflectionClass('Service');

$annotation = seasar::util::Annotation::get($service, '@Sample');
print_r($annotation);

$annotation = seasar::util::Annotation::get($service, 'SAMPLE');
print_r($annotation);
]]></programlisting>

    <para>
       上記スクリプトを実行すると、コメントアノテーションと定数アノテーションで記述した値を配列値として取得できます。
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
% php example.php
Array
(
    [name] => seasar
)
Array
(
    [name] => seasar.php
)
%
]]></programlisting>
    <note><title>NOTE</title>
      <para>このExampleは examples/misc/annotation にあります。</para>
    </note>

    <sbr/>
    <blockquote>
      <formalpara><title>COMMENT設定</title></formalpara>
      <para>
            コメントアノテーションを読み込む設定とします。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::util::Annotation::$COMMENT = true;
]]></programlisting>

      <formalpara><title>CONSTANT設定</title></formalpara>
      <para>
            定数アノテーションを読み込む設定とします。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::util::Annotation::$CONSTANT = false;
]]></programlisting>

      <formalpara><title>Annotation::get メソッド</title></formalpara>
      <para>
            アノテーションを取得します。第1引数には、ReflectionClass、ReflectionMethod、ReflectionPropertyを指定でいます。
            クラスアノテーションまたは定数アノテーションを取得する場合はReflectionClassを渡します。メソッドアノテーションを取得する場合は
      ReflectionMethod、プロパティアノテーションを取得する場合はReflectionPropertyを渡します。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @param ReflectionClass|ReflectionMethod|ReflectionProperty $reflection
 * @param string $annotation
 * @return array
 * @throw seasar::exception::AnnotationNotFoundException
 */
publi static function get($reflection, $annotation)
]]></programlisting>

      <formalpara><title>Annotation::has メソッド</title></formalpara>
      <para>
            アノテーションが記述されているかを取得します。第1引数には、ReflectionClass、ReflectionMethod、ReflectionPropertyを指定でいます。
            クラスアノテーションまたは定数アノテーションを調べる場合はReflectionClassを渡します。メソッドアノテーションを調べる場合は
      ReflectionMethod、プロパティアノテーションを調べる場合はReflectionPropertyを渡します。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @param ReflectionClass|ReflectionMethod|ReflectionProperty $reflection
 * @param string $annotation
 * @return boolean
 */
publi static function has($reflection, $annotation)
]]></programlisting>

    </blockquote>
  </sect1>


  <!-- ##################################################################### -->
  <sect1 id="misc.classloader"><title>ClassLoader API リファレンス</title>
     <para>
       seasar::util::ClassLoaderクラスは、ファイルシステム上のクラスファイルを検索し、autoload関数を介して
              クラス定義をロードします。クラスのインポートは次のメソッドで行います。
     </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
seasar::util::ClassLoader::import($path, array $namespace = array(), $strict = false, $pear = false, $recursive = true)
]]></programlisting>
    <blockquote>
      <itemizedlist>
        <listitem>第1引数 : 検索するディレクトリへのパス</listitem>
        <listitem>第2引数 : namespaceの配列</listitem>
        <listitem>第3引数 : trueの場合、$namespaceで指定されたネームスペースが使用されます。falseの場合は、検索したサブディレクトリが$namespaceに順次追加されます。</listitem>
        <listitem>第4引数 : trueの場合は、$namespaceが「_」で展開されます。falseの場合は、$namespaceが「::」で展開されます</listitem>
        <listitem>第5引数 : trueの場合は、再帰的にディレクトリを検索します。falseの場合は、サブディレクトリを検索しません。</listitem>
      </itemizedlist>
    </blockquote>

     <para>
                第1引数で指定したディレクトリにあるクラスファイル( .php、.class.php など)をインポートします。
              インポートではクラス名とクラスファイルのパスを取得します。この情報は autoload 関数でクラス定義が require される際に使用されます。
              クラス名はクラスファイル名の拡張子を除く部分になります。クラスファイル名が S2Container.php や S2Container.class.php の場合、
              「 S2Container 」がクラス名になります。
     </para>
  </sect1>

  <!-- ##################################################################### -->
  <sect1 id="misc.pdo"><title>PDOを用いたデータベースアクセス</title>
    <sect2><title>PDOを継承するクラスを使用する</title>
        <para>
        PDOクラスを継承する任意のクラスを作成します。クラスのコンストラクタでデータソースを設定します。
        </para>
        <para>例として、次のようなSqlitePdoクラスを  /path/to/classes/SqlitePdo.php に作成します。</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class SqlitePdo extends ::PDO {
    public function __construct() {
        parent::__construct('sqlite:' DB_DIR . '/sqlite.db');
        $this->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }
}
]]></programlisting>

        <para>作成したPDOクラスを使用するCdDaoを  /path/to/classes/CdDao.php に作成します。</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class CdDao {
    public $sqlitePdo = null;
    public function findAll() {
        $stmt = $sqlitePdo->prepare('select * from CD');
        $stmt->setFetchMode(PDO::FETCH_OBJ);
        $stmt->execute();
        return $stmt->fetchAll();
    }
}
]]></programlisting>

        <para>PDOクラスやCdDaoクラスをS2ApplicationContextでimportします。</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar::container::S2ApplicationCcontext as s2app;

s2app::import('/path/to/classes');
$cdDao = s2app::get('CdDao');
var_dump($cdDao->findAll());

]]></programlisting>
    </sect2>

    <sbr/>
    <sect2><title>DICONファイルでPDOを設定する</title>
        <para>
        DICONファイルでPDOの設定を行います。例として、次のようなDICONファイルを /path/to/dicons/pdo.dicon として作成します。
        </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR2.1//DTD S2Container//EN"
"http://www.seasar.org/dtd/components21.dtd">
<components>
   <component name="sqlitePdo" class="PDO">
       <arg>return 'sqlite:' . DB_DIR . '/sqlite.db'</arg>
   </component>
</components>

]]></programlisting>

        <para>作成したDICONファイルやCdDaoクラスをS2ApplicationContextでimportします。</para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');
use seasar::container::S2ApplicationCcontext as s2app;

s2app::import('/path/to/dicons');
s2app::import('/path/to/classes');
$cdDao = s2app::get('CdDao');
var_dump($cdDao->findAll());

]]></programlisting>
    </sect2>
  </sect1>


  <!-- ##################################################################### -->
  <sect1 id="misc.pdointerceptor"><title>PdoInterceptorを用いたデータベースアクセス</title>
    <sect2><title>Exampleについて</title>
      <para>
        PdoInterceptorを用いたデータベースアクセスのExampleは、example/misc/pdo にあります。
                各クラスファイル、設定ファイル、ディレクトリ構成は次になります。
                
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
example/misc/pdo/
 +-- classes/
 |    +-- sample/
 |    +-- Paginate.php
 |    +-- PdoInterceptor.php
 |    +-- SqlFileReader.php
 +-- config/
 |    +-- pdo.dicon
 |    +-- SqliteAPdo.php
 |    +-- SqliteBPdo.php
 +-- db/
 |    +-- sqlite_a.db
 |    +-- sqlite_b.db
 |    +-- sqlite_c.db
 +-- tests/
 +-- main.php
      
]]></programlisting>

        clasesディレクトリにある次の3つのクラスがPdoInterceptorを使用するために必要となります。
        <itemizedlist>
          <listitem>PdoInterceptor.php</listitem>
          <listitem>SqlFileReader.php</listitem>
          <listitem>Paginate.php</listitem>
        </itemizedlist>
      </para>
      
      <para>
        PDOのデータソース設定は、configディレクトリに次の3つのファイルで行っています。
                それぞれ、dbディレクトリのSqliteデータベースファイルをデータソースとしています。
        <itemizedlist>
          <listitem>SqliteAPdo.php : db/sqlite_a.db を使用するDSN設定</listitem>
          <listitem>SqliteBPdo.php : db/sqlite_b.db を使用するDSN設定</listitem>
          <listitem>pdo.dicon : db/sqlite_c.db を使用するDSN設定</listitem>
        </itemizedlist>
                また、PDOの設定については、<link linkend="misc.pdo">PDOを用いたデータベースアクセス</link>を参照下さい。
      </para>

      <para>
              テーブル設定
      </para>
    </sect2>

    <sbr/>
    <sect2><title>PdoInterceptorの概要</title>
      <para>
        PdoInterceptorのアスペクト対象は、クラスとインターフェースです。クラスにアスペクトした場合は、Pointcutに
                適合したメソッドが実行されます。PdoInterceptorは、メソッドの戻り値が null または配列でなければ、SQLクエリ
                として扱います。メソッドの戻り値が配列の場合は、1番目の値をSQLクエリ、2番目の値をSQL発行時のコンテキストとして
                扱います。メソッドの戻り値が null の場合は、SQLファイルを探してSQLクエリを取得します。PdoIterceptorがインターフェースに
                アスペクトされている場合は、メソッドの呼び出しを行いません。メソッドの戻り値が null の場合と同様に、SQLファイルを探してSQLクエリを取得します。
      </para>
      
      <para>
        SQLクエリが取得できた場合は、データベースに発行して結果を メソッドの戻り値として return します。
                利用可能なPDO設定が複数ある場合、どのDSNを使用するかを@S2Pdoアノテーションで指定します。
                データーベースへのSQLクエリの発行は、PDOのPrepared Statementが使用されます。 Prepared Statementにバインド
                されるvalueは、メソッド引数が使用されます。メソッドの戻り値が配列の場合は、2番目の値がバインドvalueとして扱われます。       
      </para>

      <para>
      PdoInterceptorには、ORマップ機能はありません。
      PdoInterceptorには、自動SQL構築機能はありません。
      </para>
    </sect2>

    <sbr/>
    <sect2><title>クラスにアスペクトする</title>      
      <para>
        CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、CDテーブルから全件を取得するfindAllメソッドを実装します。
                メソッドの戻り値としてデータベースに発行するSQLクエリを返します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findAll() {
        return 'select * from CD';
    }
}

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample1.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>findAllメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample1.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::CdDao');
$rows = $dao->findAll();
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>インターフェースにアスペクトする</title>      
      <para>
        CDテーブルにアクセスするICdDaoインターフェースを作成します。ICdDaoインターフェースには、CDテーブルから全件を取得するfindAllメソッドを定義します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/ICdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class ICdDao {
    public function findAll();
}

]]></programlisting>      
      </blockquote>

      <para>
        findAllメソッドが呼ばれた際に発行するSQLクエリをSQLファイルに記述します。SQLファイルはインターフェースファイルと同じディレクトリに配置します。
        SQLファイル名は、インターフェース名_メソッド名.sqlとなります。ICdDaoインターフェースのfindAllメソッドの場合は、ICdDao_findAll.sqlとなります。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/ICdDao_findAll.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from CD

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample2.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>ICdDaoコンポーネントの取得</listitem>
        <listitem>findAllメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample2.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$rows = $dao->findAll();
var_dump($rows);

]]></programlisting>      
      </blockquote>

    </sect2>

    <sbr/>
    <sect2><title>メソッド引数でバインド値を設定する</title>      
      <para>
        CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、CDテーブルからIDで検索するfindByIdメソッドを実装します。
        findByIdメソッドの引数で検索するIDを指定します。SQLクエリへのIDの埋め込みは、「/*:変数名*/サンプルデータ」で行います。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findById($id) {
        return "select * from CD where id = /*:id*/5";    
    }
}

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample3.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>findByIdメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample3.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$rows = $dao->findById(1);
var_dump($rows);

]]></programlisting>      
      </blockquote>

    </sect2>

    <sbr/>
    <sect2><title>バインド値にオブジェクトを使用する</title>      
      <para>
        CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、CDテーブルからIDで検索したデータを取得するfindBySqlFile1メソッドを実装します。
                メソッドの戻り値として null を返します。PdoInterceptorはメソッドの戻り値が null の場合、SQLファイルからSQLクエリを取得します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findBySqlFile1($condition){}
}

]]></programlisting>      
      </blockquote>

      <para>
        findBySqlFile1メソッドが呼ばれた際に発行するSQLクエリをSQLファイルに記述します。SQLファイルはCdDaoクラスファイルと同じディレクトリに配置します。
        SQLファイル名は、クラス名_メソッド名.sqlとなります。CdDaoクラスのfindBySqlFile1メソッドの場合は、CdDao_findBySqlFile1.sqlとなります。
        SQLファイルはPHPファイルとしてrequireされるので、PHPで記述することができます。SQLクエリにオブジェクトを用いてバインド値を埋め込む場合、
                オブジェクトのプロパティやメソッドにアクセスする際は、アンダースコアで記述します。$conditionオブジェクトのidプロパティにアクセスする場合は、「:condition_id」
                となります。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao_findBySqlFile1.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from CD
/* <?php if (is_integer($condition->id)):?> */
    where id = /*:condition_id*/5
/* <?php endif?> */

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample4.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>conditionオブジェクトを作成</listitem>
        <listitem>findBySqlFile1メソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample4.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$condition = new StdClass;
$condition->id = 1;
$rows = $dao->findBySqlFile1($condition);
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>バインド値に配列を使用する</title>      
      <para>
        CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、CDテーブルからIDで検索したデータを取得するfindBySqlFile3メソッドを実装します。
                メソッドの戻り値として null を返します。PdoInterceptorはメソッドの戻り値が null の場合、SQLファイルからSQLクエリを取得します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findBySqlFile3($condition){}
}

]]></programlisting>      
      </blockquote>

      <para>
        findBySqlFile1メソッドが呼ばれた際に発行するSQLクエリをSQLファイルに記述します。SQLファイルはCdDaoクラスファイルと同じディレクトリに配置します。
        SQLファイル名は、クラス名_メソッド名.sqlとなります。CdDaoクラスのfindBySqlFile3メソッドの場合は、CdDao_findBySqlFile3.sqlとなります。
        SQLファイルはPHPファイルとしてrequireされるので、PHPで記述することができます。SQLクエリに配列を用いてバインド値を埋め込む場合、
                配列の値にアクセスする際は、アンダースコアで記述します。$condition配列のidキーにアクセスする場合は、「:condition_id」となります。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao_findBySqlFile3.sql</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
select * from CD
/* <?php if (is_integer($condition['id']):?> */
    where id = /*:condition_id*/5
/* <?php endif?> */

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample5.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>condition配列を作成</listitem>
        <listitem>findBySqlFile3メソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample5.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$condition = array('id' => 1);
$rows = $dao->findBySqlFile3($condition);
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>メソッドの戻り値でバインド値を設定する</title>      
      <para>
        CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、CDテーブルからタイトル名で検索するfindByTitleメソッドを実装します。
                メソッドの戻り値を配列とし、1番目の値にSQLクエリ、2番目の値にSQLクエリにバインドする値を配列で指定します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public function findByTitle() {
        return array("select * from CD where title = /*:title*/'AAA'", array('title' => 'S2Pdo!!!'));
    }
}

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample6.phpを作成します。Sqliteデーターベースファイルはsqlite_a.dbを使用します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>findByTitleメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample6.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config/SqliteAPdo.php');

$dao = s2app::get('sample::pdo::ICdDao');
$rows = $dao->findByTitle();
var_dump($rows);

]]></programlisting>      
      </blockquote>

    </sect2>

    <sbr/>
    <sect2><title>@S2Pdoアノテーションを使用する</title>      
      <para>
        @S2Pdoアノテーションは、クラスまたはメソッドに注釈します。次の2つを設定できます。
        <itemizedlist>
          <listitem>複数のデータソースを使用する場合に、どのPDOコンポーネントを使用するかを指定します。</listitem>
          <listitem>PdoInterceptor処理を実施するかどうかを指定します。(メソッドに注釈付けした場合)</listitem>
        </itemizedlist>
      </para>
      <para>
              書式は次のようになります。
      </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
/**
 * @S2Pdo('pdo'       => PDOコンポーネント名,
 *        'available' => true)
 */
]]></programlisting>

      <para>
                例として、CDテーブルにアクセスするCdDaoクラスを作成します。CdDaoクラスには、sqlite_bデータベースの
        CDテーブルから全件を取得するfindAllFromBメソッドを実装します。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    /**
     * @S2Pdo('pdo' => 'sqliteBPdo')
     */
    public function findAllFromB() {
        return "select * from CD";
    }
}

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample7.phpを作成します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにconfディレクトリ以下をimport (3つのPDOコンポーネントが読み込まれます)</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>findAllFromBメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample7.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config');

$dao = s2app::get('sample::pdo::CdDao');
$rows = $dao->findAllFromB();
var_dump($rows);

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>DaoクラスでPDOを直接使用する</title>      
      <para>
      Daoクラスの中で直接PDOを使用する場合は、DaoクラスにPDOコンポーネントをインジェクションします。
            次の例では、CdDaoクラスにSqliteBPdoコンポーネントをインジェクションするpublicプロパティを用意しています。
            これにより、S2Containerの自動インジェクション機能によりPDOコンポーネントがCdDaoコンポーネントにインジェクションされます。
      transactionalInsertメソッドでは、インジェクションされたPDOコンポーネントを使用してトランザクションを開始しています。
      </para>

      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/CdDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
class CdDao {
    public $sqliteBPdo = 's2binding';

    /**
     * @S2Pdo('available' => false)
     */
    public function transactionalInsert() {
        try {
            $this->sqliteBPdo->beginTransaction();
            $this->insert(10, 'S2Pdo transaction', 'sample');
            $this->sqliteBPdo->commit();
        } catch (Exception $e) {
            seasar::log::S2Logger::getInstance(__NAMESPACE__)->warn($e->getMessage(), __METHOD__);
            $this->sqliteBPdo->rollBack();
        }
    }

    /**
     * @S2Pdo('pdo' => 'SqliteBPdo')
     */
    public function insert($id, $title, $content) {
        return "insert into CD values(/*:id*/5, /*:title*/'aaa', /*:content*/'bbb' )";
    }
}

]]></programlisting>      
      </blockquote>

      <para>
             次の処理を行うsample8.phpを作成します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにconfディレクトリ以下をimport (3つのPDOコンポーネントが読み込まれます)</listitem>
        <listitem>CdDaoコンポーネントの取得</listitem>
        <listitem>transactionalInsertメソッドの実行</listitem>
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample8.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config');

$dao = s2app::get('sample::pdo::CdDao');
$dao->transactionalInsert();

]]></programlisting>      
      </blockquote>
    </sect2>

    <sbr/>
    <sect2><title>Paginateクラスでページング処理</title>      
      <para>
        Paginateクラスは、データベースからのデータ取得の際にページングを行うユーティリティクラスです。    
                 例として、EMPテーブルにアクセスするEmpDaoクラスを作成します。EmpDaoクラスには、次のようなfindByPaginateメソッドを実装します。
        PDOコンポーネントにはdb/sqlite_c.dbをデータソースとするsqliteCコンポーネントを用いています。
        sqliteCコンポーネントは、config/pdo.diconで設定されています。
      </para>
      <blockquote>
        <itemizedlist>
          <listitem>classes/sample/pdo/EmpDao.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample::pdo;
/**
 * @S2Pdo('pdo' => 'sqliteC')
 */
class EmpDao {

    /**
     * @S2Pdo('available' => false)
     */
    public function findByPaginate(::Paginate $paginate) {
        list($row) = $this->findAllTotal($paginate);
        $paginate->setTotal($row->total);
        return $this->findAll($paginate);
    }

    public function findAllTotal(::Paginate $paginate) {
        return "select count(*) as total from EMP";
    }

    public function findAll(::Paginate $paginate) {
        return "select * from EMP
                limit /*:paginate_getLimit*/3 offset /*:paginate_getOffset*/5";
    }
}

]]></programlisting>      
      </blockquote>
      <para>
        findByPaginateメソッドでは、まずfindAllTotalメソッドで全件数を取得し、paginateインスタンスに設定します。
        (Paginateクラスでページング処理を実施するために全件数が必要なため)
                その後、findAllメソッドを実行し、データを取得しています。findAllメソッドでは、limit/offset値にpaginateインスタンスが持つ
                情報を設定して、ページングを実施しています。
      </para>
      <para>
             次の処理を行うsample9.phpを作成します。
      </para>
      <orderedlist>
        <listitem>共通設定ファイルの読み込み</listitem>
        <listitem>「Dao」クラスにPdoInterceptorを自動アスペクト</listitem>
        <listitem>S2ApplicationContextにclassesディレクトリ以下をimport</listitem>
        <listitem>S2ApplicationContextにsqlite_a.dbをDSNに設定するSqlitePdoA.phpをimport</listitem>
        <listitem>EmpDaoコンポーネントの取得</listitem>
        <listitem>Paginateインスタンスを生成し、1ページのアイテム数を設定</listitem>
        <listitem>findByPaginateメソッドを実行</listitem>
        <listitem>次のページに遷移</listitem>
        <listitem>findByPaginateメソッドを実行</listitem>
        <!-- 
        <listitem>Paginateクラスのfindメソッドでデータの取得</listitem>
         -->
      </orderedlist>
      <blockquote>
        <itemizedlist>
          <listitem>sample9.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
define('ROOT_DIR', dirname(__FILE__));
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');

use seasar::container::S2ApplicationContext as s2app;
s2app::registerAspect('/Dao$/', 'pdo.interceptor');
s2app::import(ROOT_DIR . '/classes');
s2app::import(ROOT_DIR . '/config');

$dao = s2app::get('sample::pdo::EmpDao');
$paginate = new Paginate;
$paginate->setLimit(5);
$rows = $dao->findByPaginate($paginate);
var_dump($rows);

$paginate->next();
$rows = $dao->findByPaginate($paginate);
var_dump($rows);

]]></programlisting>      
      </blockquote>

<!--
      <para>
        Paginateクラスのfindメソッドの定義は次になります。
      </para>
      <blockquote>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
final public function find($dao, $methodName, $totalMethodName = null);
]]></programlisting>      
        <itemizedlist>
          <listitem>第1引数 : Daoインスタンス</listitem>
          <listitem>第2引数 : データ取得メソッド名</listitem>
          <listitem>第3引数 : データ件数取得メソッド名</listitem>
        </itemizedlist>
      </blockquote>
      <para>
              第3引数が省略された場合は、第2引数の値に "Total" を追記した文字列をメソッド名とします。上記例の場合は、
              データ取得メソッド名が "findAll" なので、 データ件数取得メソッド名は "findAllTotal" となります。
      </para>
  -->      
    </sect2>    
  </sect1>

  <!-- ##################################################################### -->
  <sect1 id="misc.strict"><title>メソッド引数を検証するStrictInterceptor</title>
    <sect2><title>Exampleについて</title>
      <para>
        StrictInterceptorのExampleは、example/misc/strict にあります。
                各クラスファイル、設定ファイル、ディレクトリ構成は次になります。
                
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
example/misc/strict/
 +-- classes/
 |    +-- sample/
 |    +-- StrictAnnotationFactory.php
 |    +-- StrictException.php
 |    +-- StrictInterceptor.php
 +-- execute.php
      
]]></programlisting>

        clasesディレクトリにある次の3つのクラスがStrictInterceptorを使用するために必要となります。
        <itemizedlist>
          <listitem>StrictAnnotationFactory.php</listitem>
          <listitem>StrictException.php</listitem>
          <listitem>StrictInterceptor.php</listitem>
        </itemizedlist>
      </para>
    </sect2>

    <sbr/>
    <sect2><title>StrictInterceptorの概要</title>
      <para>
        StrictInterceptorはメソッド呼び出し時にメソッド引数と戻り値について型チェックをおこなうInterceptorです。
                メソッド引数や戻り値の型の指定はコメントアノテーションで行います。
        <itemizedlist>
          <listitem>@param メソッドの引数の型を指定</listitem>
          <listitem>@return メソッドの戻り値の型を指定</listitem>
        </itemizedlist>
        @paramアノテーションは、1引数にひとつ指定します。例として、Calcクラスのaddメソッドのアノテーションを次に示します。
<blockquote>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class Calc {
    /**
     * @param numeric $a
     * @param numeric $b
     * @return integer
     */
    public function add($a, $b) {
        return $a + $b;
    }
}
]]></programlisting>
</blockquote>
      </para>
      
      <para>
               型のチェックは、指定された型がクラスの場合は、そのクラスに属するインスタンスかどうかが確認されます。
               指定された型のクラスが存在しない場合は、指定された型の先頭に「is_」を付加した関数を使用してチェックを実施します。
               型指定がintegerの場合は、is_integer関数が使用されます。また、型の指定は、「|」で区切ることで複数指定できます。
               複数の型が指定されている場合は、ORチェックが成されます。
      </para>
    </sect2>

    <sbr/>
    <sect2><title>StrictInterceptorをアスペクトする</title>
      <para>
              例として、次のようなHogeクラスを作成します。
      </para>
<blockquote>
        <itemizedlist>
          <listitem>classes/sample/Hoge.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
namespace sample;
class Hoge {
    /**
     * @param numeric $a is_numeric関数で確認されます。
     * @param string  $b is_string関数で確認されます。
     * @return object is_object関数で確認されます。
     */
    public function foo($a, $b) {
        return new StdClass;
    }

    /**
     * @param sample::Huga  $a Hugaクラスかどうか、または、is_subclass_of関数で確認されます。
     * @param mixed $b 型チェックを行いません。
     * @return null|sample::Huga is_null関数で確認されます。
     *                           またはHugaクラスかどうか、またはis_subclass_of関数で確認されます。
     */
    public function bar(sample::Huga $a, $b) {
        return null;
    }
}
class Huga{}

]]></programlisting>
</blockquote>

      <para>
              実行スクリプトは次になります。HogeクラスにStrictInterceptorを自動アスペクトしています。
      </para>
<blockquote>
        <itemizedlist>
          <listitem>sample.php</listitem>
        </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once(dirname(dirname(dirname(__FILE__))) . '/example.inc.php');
use seasar::container::S2ApplicationContext as s2app;

s2app::import(dirname(__FILE__) . '/classes');
s2app::registerAspect('/Hoge/', 'StrictInterceptor');
$hoge = s2app::get('Hoge');

$obj = $hoge->foo(1, 'abc');
$obj = $hoge->bar(new sample::Huga, 100);

try {
    $obj = $hoge->foo(1, 2);
} catch(StrictException $e) {
    print $e->getMessage() . PHP_EOL;
}

]]></programlisting>
</blockquote>
      <para>
        2番目のfooメソッドの実行では、第2引数が文字列ではないためStrictExceptionが発生します。
                「argument[1] type unmatch. expected string」とメッセージが表示されます。
      </para>
    </sect2>
  </sect1>


  <!-- ##################################################################### -->
  <sect1 id="misc.zend"><title>Zend_ControllerでS2Containerを使用する</title>
  </sect1>

  <!-- ##################################################################### -->
  <sect1 id="misc.symfony"><title>SymfonyでS2Containerを使用する</title>
  </sect1>

  <!-- ##################################################################### -->
  <sect1 id="misc.beandesc"><title>BeanDesc API リファレンス</title>
  </sect1>
</chapter>
