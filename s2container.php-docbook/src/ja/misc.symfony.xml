<sect1 id="misc.symfony"><title>SymfonyでS2Containerを使用する</title>
  <sect2><title>Smfonyのスタートアップ</title>
    <para>Symfonyで任意のプロジェクト、アプリケーション、モジュールを作成します。</para>
  </sect2>

  <sect2><title>S2Containerの設定</title>
    <para>
      S2Container.phpをPEARでインストールします。フルパッケージでインストールする場合は、
            プロジェクトディレクトリのlibディレクトリにS2Containerとして解凍します。
            次のS2Containerの設定ファイルサンプルをプロジェクトディレクトリのconfigディレクトリにs2.phpとして保存します。
      <itemizedlist>
        <listitem>config/s2.php</listitem>
      </itemizedlist>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once('S2Container/S2Container.php');

/** S2Log設定 */
seasar\Config::$LOG_LEVEL = seasar\log\impl\SimpleLogger::DEBUG;
seasar\Config::$DEBUG_EVAL = false;
seasar\Config::$DEBUG_VERBOSE = false;
seasar\Config::$SIMPLE_LOG_FILE = SF_ROOT_DIR . '/log/s2.log';

/** S2Aop設定 */
seasar\aop\Config::$CACHING = false;
seasar\aop\Config::$CACHE_DIR = SF_ROOT_DIR . '/cache/s2aop';

]]></programlisting>

    </para>
  </sect2>

  <sect2><title>アクションの作成</title>
    <para>
          モジュールの作成時に生成されるactions.class.phpを次のように編集します。

      <itemizedlist>
        <listitem>module/actions/actions.class.php</listitem>
      </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once(SF_ROOT_DIR . '/config/s2.php');
use seasar\container\S2ApplicationContext as s2app;
s2app::import(dirname(dirname(__FILE__)) . '/lib/logic');

class defaultActions extends sfActions {
    public function executeIndex() {
      $this->greeting = s2app::get('Hoge')->greeting();
    }
}
]]></programlisting>
      <orderedlist>
        <listitem>s2.php共通設定ファイルを読み込みます。</listitem>
        <listitem>useを用いてS2ApplicationContextを別名で定義します。 (必須ではありません)</listitem>
        <listitem>Logicディレクトリをインポートします。</listitem>
        <listitem>
                    アクションメソッドでHogeコンポーネントを使用します。getメソッドでコンポーネントを取得する場合は、
          S2ApplicationContext内部で管理されるSingleton S2Containerが使用されます。
        </listitem>
      </orderedlist>

    </para>

    <para>
          アクションクラスで使用するHogeクラスをモジュールディレクトリのlib/logicディレクトリに作成します。
      <itemizedlist>
        <listitem>module/lib/logic/Hoge.php</listitem>
      </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class Hoge {
    public function greeting() {
        return 'Hello World !!';
    }
}
]]></programlisting>
    </para>

    <para>
      indexアクションのテンプレートを編集します。
      <itemizedlist>
        <listitem>module/template/indexSuccess.php</listitem>
      </itemizedlist>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
greeting : <?php echo $greeting; ?> <br>
]]></programlisting>
    </para>
    
    <para>indexページにアクセスすると、「greeting : Hello World !!」と表示されます。</para>

  </sect2>

  <sect2><title>Mockを使用する</title>
    <para>
      MockInterceptorをHogeクラスにアスペクトして、greetingメソッドの戻り値を設定します。
    </para>
<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
class Hoge {
    /**
     * @S2Aspect('interceptor' => 'new seasar\aop\interceptor\MockInterceptor')
     * @S2Mock('return' => 'strval("Bye World !!")')
     */
    public function greeting() {
        return 'Hello World !!';
    }
}
]]></programlisting>

    <para>indexページにアクセスすると、「greeting : Bye World !!」と表示されます。</para>

    <para>
      @S2Aspectアノテーションは、クラスに注釈することもできます。また、S2ApplicationContextの自動アスペクトを使用しても、
           同様の結果を得ることができます。自動アスペクトを行う場合は、アクションクラスのS2ApplicationContext設定部に、
      registerAspectメソッドを追記します。
    </para>

<programlisting continuation="restart" linenumbering="unnumbered"><![CDATA[
<?php
require_once(SF_ROOT_DIR . '/config/s2.php');
use seasar\container\S2ApplicationContext as s2app;
s2app::import(dirname(dirname(__FILE__)) . '/lib/logic');
s2app::registerAspect('new seasar\aop\interceptor\MockInterceptor', '/^Hoge$/');

class defaultActions extends sfActions {
    public function executeIndex() {
      $this->greeting = s2app::get('Hoge')->greeting();
    }
}
]]></programlisting>
  </sect2>


</sect1>
